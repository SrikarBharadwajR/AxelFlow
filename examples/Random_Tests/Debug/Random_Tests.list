
Random_Tests.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014c8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  0800168c  0800168c  0001168c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080016b4  080016b4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080016b4  080016b4  000116b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080016bc  080016bc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080016bc  080016bc  000116bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080016c0  080016c0  000116c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080016c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  080016d0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  080016d0  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00009625  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000015e0  00000000  00000000  000296a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000630  00000000  00000000  0002ac88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004ec  00000000  00000000  0002b2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020a50  00000000  00000000  0002b7a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000afa5  00000000  00000000  0004c1f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c79ae  00000000  00000000  00057199  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000f4c  00000000  00000000  0011eb48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00004185  00000000  00000000  0011fa94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  00123c19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08001674 	.word	0x08001674

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08001674 	.word	0x08001674

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000224:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000228:	f000 b970 	b.w	800050c <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9e08      	ldr	r6, [sp, #32]
 800024a:	460d      	mov	r5, r1
 800024c:	4604      	mov	r4, r0
 800024e:	460f      	mov	r7, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14a      	bne.n	80002ea <__udivmoddi4+0xa6>
 8000254:	428a      	cmp	r2, r1
 8000256:	4694      	mov	ip, r2
 8000258:	d965      	bls.n	8000326 <__udivmoddi4+0xe2>
 800025a:	fab2 f382 	clz	r3, r2
 800025e:	b143      	cbz	r3, 8000272 <__udivmoddi4+0x2e>
 8000260:	fa02 fc03 	lsl.w	ip, r2, r3
 8000264:	f1c3 0220 	rsb	r2, r3, #32
 8000268:	409f      	lsls	r7, r3
 800026a:	fa20 f202 	lsr.w	r2, r0, r2
 800026e:	4317      	orrs	r7, r2
 8000270:	409c      	lsls	r4, r3
 8000272:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000276:	fa1f f58c 	uxth.w	r5, ip
 800027a:	fbb7 f1fe 	udiv	r1, r7, lr
 800027e:	0c22      	lsrs	r2, r4, #16
 8000280:	fb0e 7711 	mls	r7, lr, r1, r7
 8000284:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000288:	fb01 f005 	mul.w	r0, r1, r5
 800028c:	4290      	cmp	r0, r2
 800028e:	d90a      	bls.n	80002a6 <__udivmoddi4+0x62>
 8000290:	eb1c 0202 	adds.w	r2, ip, r2
 8000294:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000298:	f080 811c 	bcs.w	80004d4 <__udivmoddi4+0x290>
 800029c:	4290      	cmp	r0, r2
 800029e:	f240 8119 	bls.w	80004d4 <__udivmoddi4+0x290>
 80002a2:	3902      	subs	r1, #2
 80002a4:	4462      	add	r2, ip
 80002a6:	1a12      	subs	r2, r2, r0
 80002a8:	b2a4      	uxth	r4, r4
 80002aa:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ae:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b6:	fb00 f505 	mul.w	r5, r0, r5
 80002ba:	42a5      	cmp	r5, r4
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x90>
 80002be:	eb1c 0404 	adds.w	r4, ip, r4
 80002c2:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x294>
 80002ca:	42a5      	cmp	r5, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x294>
 80002d0:	4464      	add	r4, ip
 80002d2:	3802      	subs	r0, #2
 80002d4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d8:	1b64      	subs	r4, r4, r5
 80002da:	2100      	movs	r1, #0
 80002dc:	b11e      	cbz	r6, 80002e6 <__udivmoddi4+0xa2>
 80002de:	40dc      	lsrs	r4, r3
 80002e0:	2300      	movs	r3, #0
 80002e2:	e9c6 4300 	strd	r4, r3, [r6]
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d908      	bls.n	8000300 <__udivmoddi4+0xbc>
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f000 80ed 	beq.w	80004ce <__udivmoddi4+0x28a>
 80002f4:	2100      	movs	r1, #0
 80002f6:	e9c6 0500 	strd	r0, r5, [r6]
 80002fa:	4608      	mov	r0, r1
 80002fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000300:	fab3 f183 	clz	r1, r3
 8000304:	2900      	cmp	r1, #0
 8000306:	d149      	bne.n	800039c <__udivmoddi4+0x158>
 8000308:	42ab      	cmp	r3, r5
 800030a:	d302      	bcc.n	8000312 <__udivmoddi4+0xce>
 800030c:	4282      	cmp	r2, r0
 800030e:	f200 80f8 	bhi.w	8000502 <__udivmoddi4+0x2be>
 8000312:	1a84      	subs	r4, r0, r2
 8000314:	eb65 0203 	sbc.w	r2, r5, r3
 8000318:	2001      	movs	r0, #1
 800031a:	4617      	mov	r7, r2
 800031c:	2e00      	cmp	r6, #0
 800031e:	d0e2      	beq.n	80002e6 <__udivmoddi4+0xa2>
 8000320:	e9c6 4700 	strd	r4, r7, [r6]
 8000324:	e7df      	b.n	80002e6 <__udivmoddi4+0xa2>
 8000326:	b902      	cbnz	r2, 800032a <__udivmoddi4+0xe6>
 8000328:	deff      	udf	#255	; 0xff
 800032a:	fab2 f382 	clz	r3, r2
 800032e:	2b00      	cmp	r3, #0
 8000330:	f040 8090 	bne.w	8000454 <__udivmoddi4+0x210>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f fe8c 	uxth.w	lr, ip
 800033e:	2101      	movs	r1, #1
 8000340:	fbb2 f5f7 	udiv	r5, r2, r7
 8000344:	fb07 2015 	mls	r0, r7, r5, r2
 8000348:	0c22      	lsrs	r2, r4, #16
 800034a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034e:	fb0e f005 	mul.w	r0, lr, r5
 8000352:	4290      	cmp	r0, r2
 8000354:	d908      	bls.n	8000368 <__udivmoddi4+0x124>
 8000356:	eb1c 0202 	adds.w	r2, ip, r2
 800035a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x122>
 8000360:	4290      	cmp	r0, r2
 8000362:	f200 80cb 	bhi.w	80004fc <__udivmoddi4+0x2b8>
 8000366:	4645      	mov	r5, r8
 8000368:	1a12      	subs	r2, r2, r0
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000370:	fb07 2210 	mls	r2, r7, r0, r2
 8000374:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000378:	fb0e fe00 	mul.w	lr, lr, r0
 800037c:	45a6      	cmp	lr, r4
 800037e:	d908      	bls.n	8000392 <__udivmoddi4+0x14e>
 8000380:	eb1c 0404 	adds.w	r4, ip, r4
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000388:	d202      	bcs.n	8000390 <__udivmoddi4+0x14c>
 800038a:	45a6      	cmp	lr, r4
 800038c:	f200 80bb 	bhi.w	8000506 <__udivmoddi4+0x2c2>
 8000390:	4610      	mov	r0, r2
 8000392:	eba4 040e 	sub.w	r4, r4, lr
 8000396:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039a:	e79f      	b.n	80002dc <__udivmoddi4+0x98>
 800039c:	f1c1 0720 	rsb	r7, r1, #32
 80003a0:	408b      	lsls	r3, r1
 80003a2:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003aa:	fa05 f401 	lsl.w	r4, r5, r1
 80003ae:	fa20 f307 	lsr.w	r3, r0, r7
 80003b2:	40fd      	lsrs	r5, r7
 80003b4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b8:	4323      	orrs	r3, r4
 80003ba:	fbb5 f8f9 	udiv	r8, r5, r9
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	fb09 5518 	mls	r5, r9, r8, r5
 80003c6:	0c1c      	lsrs	r4, r3, #16
 80003c8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003cc:	fb08 f50e 	mul.w	r5, r8, lr
 80003d0:	42a5      	cmp	r5, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	fa00 f001 	lsl.w	r0, r0, r1
 80003da:	d90b      	bls.n	80003f4 <__udivmoddi4+0x1b0>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003e4:	f080 8088 	bcs.w	80004f8 <__udivmoddi4+0x2b4>
 80003e8:	42a5      	cmp	r5, r4
 80003ea:	f240 8085 	bls.w	80004f8 <__udivmoddi4+0x2b4>
 80003ee:	f1a8 0802 	sub.w	r8, r8, #2
 80003f2:	4464      	add	r4, ip
 80003f4:	1b64      	subs	r4, r4, r5
 80003f6:	b29d      	uxth	r5, r3
 80003f8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003fc:	fb09 4413 	mls	r4, r9, r3, r4
 8000400:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000404:	fb03 fe0e 	mul.w	lr, r3, lr
 8000408:	45a6      	cmp	lr, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x1da>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000414:	d26c      	bcs.n	80004f0 <__udivmoddi4+0x2ac>
 8000416:	45a6      	cmp	lr, r4
 8000418:	d96a      	bls.n	80004f0 <__udivmoddi4+0x2ac>
 800041a:	3b02      	subs	r3, #2
 800041c:	4464      	add	r4, ip
 800041e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000422:	fba3 9502 	umull	r9, r5, r3, r2
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	42ac      	cmp	r4, r5
 800042c:	46c8      	mov	r8, r9
 800042e:	46ae      	mov	lr, r5
 8000430:	d356      	bcc.n	80004e0 <__udivmoddi4+0x29c>
 8000432:	d053      	beq.n	80004dc <__udivmoddi4+0x298>
 8000434:	b156      	cbz	r6, 800044c <__udivmoddi4+0x208>
 8000436:	ebb0 0208 	subs.w	r2, r0, r8
 800043a:	eb64 040e 	sbc.w	r4, r4, lr
 800043e:	fa04 f707 	lsl.w	r7, r4, r7
 8000442:	40ca      	lsrs	r2, r1
 8000444:	40cc      	lsrs	r4, r1
 8000446:	4317      	orrs	r7, r2
 8000448:	e9c6 7400 	strd	r7, r4, [r6]
 800044c:	4618      	mov	r0, r3
 800044e:	2100      	movs	r1, #0
 8000450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000454:	f1c3 0120 	rsb	r1, r3, #32
 8000458:	fa02 fc03 	lsl.w	ip, r2, r3
 800045c:	fa20 f201 	lsr.w	r2, r0, r1
 8000460:	fa25 f101 	lsr.w	r1, r5, r1
 8000464:	409d      	lsls	r5, r3
 8000466:	432a      	orrs	r2, r5
 8000468:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800046c:	fa1f fe8c 	uxth.w	lr, ip
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1510 	mls	r5, r7, r0, r1
 8000478:	0c11      	lsrs	r1, r2, #16
 800047a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047e:	fb00 f50e 	mul.w	r5, r0, lr
 8000482:	428d      	cmp	r5, r1
 8000484:	fa04 f403 	lsl.w	r4, r4, r3
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0x258>
 800048a:	eb1c 0101 	adds.w	r1, ip, r1
 800048e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000492:	d22f      	bcs.n	80004f4 <__udivmoddi4+0x2b0>
 8000494:	428d      	cmp	r5, r1
 8000496:	d92d      	bls.n	80004f4 <__udivmoddi4+0x2b0>
 8000498:	3802      	subs	r0, #2
 800049a:	4461      	add	r1, ip
 800049c:	1b49      	subs	r1, r1, r5
 800049e:	b292      	uxth	r2, r2
 80004a0:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a4:	fb07 1115 	mls	r1, r7, r5, r1
 80004a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004ac:	fb05 f10e 	mul.w	r1, r5, lr
 80004b0:	4291      	cmp	r1, r2
 80004b2:	d908      	bls.n	80004c6 <__udivmoddi4+0x282>
 80004b4:	eb1c 0202 	adds.w	r2, ip, r2
 80004b8:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004bc:	d216      	bcs.n	80004ec <__udivmoddi4+0x2a8>
 80004be:	4291      	cmp	r1, r2
 80004c0:	d914      	bls.n	80004ec <__udivmoddi4+0x2a8>
 80004c2:	3d02      	subs	r5, #2
 80004c4:	4462      	add	r2, ip
 80004c6:	1a52      	subs	r2, r2, r1
 80004c8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004cc:	e738      	b.n	8000340 <__udivmoddi4+0xfc>
 80004ce:	4631      	mov	r1, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e708      	b.n	80002e6 <__udivmoddi4+0xa2>
 80004d4:	4639      	mov	r1, r7
 80004d6:	e6e6      	b.n	80002a6 <__udivmoddi4+0x62>
 80004d8:	4610      	mov	r0, r2
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x90>
 80004dc:	4548      	cmp	r0, r9
 80004de:	d2a9      	bcs.n	8000434 <__udivmoddi4+0x1f0>
 80004e0:	ebb9 0802 	subs.w	r8, r9, r2
 80004e4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e8:	3b01      	subs	r3, #1
 80004ea:	e7a3      	b.n	8000434 <__udivmoddi4+0x1f0>
 80004ec:	4645      	mov	r5, r8
 80004ee:	e7ea      	b.n	80004c6 <__udivmoddi4+0x282>
 80004f0:	462b      	mov	r3, r5
 80004f2:	e794      	b.n	800041e <__udivmoddi4+0x1da>
 80004f4:	4640      	mov	r0, r8
 80004f6:	e7d1      	b.n	800049c <__udivmoddi4+0x258>
 80004f8:	46d0      	mov	r8, sl
 80004fa:	e77b      	b.n	80003f4 <__udivmoddi4+0x1b0>
 80004fc:	3d02      	subs	r5, #2
 80004fe:	4462      	add	r2, ip
 8000500:	e732      	b.n	8000368 <__udivmoddi4+0x124>
 8000502:	4608      	mov	r0, r1
 8000504:	e70a      	b.n	800031c <__udivmoddi4+0xd8>
 8000506:	4464      	add	r4, ip
 8000508:	3802      	subs	r0, #2
 800050a:	e742      	b.n	8000392 <__udivmoddi4+0x14e>

0800050c <__aeabi_idiv0>:
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop

08000510 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000514:	2400      	movs	r4, #0
 8000516:	9405      	str	r4, [sp, #20]
 8000518:	9406      	str	r4, [sp, #24]
 800051a:	9407      	str	r4, [sp, #28]
 800051c:	9408      	str	r4, [sp, #32]
 800051e:	9409      	str	r4, [sp, #36]	; 0x24
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000520:	9401      	str	r4, [sp, #4]
 8000522:	4b22      	ldr	r3, [pc, #136]	; (80005ac <MX_GPIO_Init+0x9c>)
 8000524:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000526:	f042 0204 	orr.w	r2, r2, #4
 800052a:	631a      	str	r2, [r3, #48]	; 0x30
 800052c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800052e:	f002 0204 	and.w	r2, r2, #4
 8000532:	9201      	str	r2, [sp, #4]
 8000534:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000536:	9402      	str	r4, [sp, #8]
 8000538:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800053a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800053e:	631a      	str	r2, [r3, #48]	; 0x30
 8000540:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000542:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8000546:	9202      	str	r2, [sp, #8]
 8000548:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800054a:	9403      	str	r4, [sp, #12]
 800054c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800054e:	f042 0201 	orr.w	r2, r2, #1
 8000552:	631a      	str	r2, [r3, #48]	; 0x30
 8000554:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000556:	f002 0201 	and.w	r2, r2, #1
 800055a:	9203      	str	r2, [sp, #12]
 800055c:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055e:	9404      	str	r4, [sp, #16]
 8000560:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000562:	f042 0202 	orr.w	r2, r2, #2
 8000566:	631a      	str	r2, [r3, #48]	; 0x30
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	f003 0302 	and.w	r3, r3, #2
 800056e:	9304      	str	r3, [sp, #16]
 8000570:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000572:	4d0f      	ldr	r5, [pc, #60]	; (80005b0 <MX_GPIO_Init+0xa0>)
 8000574:	4622      	mov	r2, r4
 8000576:	2120      	movs	r1, #32
 8000578:	4628      	mov	r0, r5
 800057a:	f000 faf9 	bl	8000b70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800057e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000582:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000584:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000588:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058a:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800058c:	a905      	add	r1, sp, #20
 800058e:	4809      	ldr	r0, [pc, #36]	; (80005b4 <MX_GPIO_Init+0xa4>)
 8000590:	f000 f9fe 	bl	8000990 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000594:	2320      	movs	r3, #32
 8000596:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000598:	2301      	movs	r3, #1
 800059a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800059c:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800059e:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005a0:	a905      	add	r1, sp, #20
 80005a2:	4628      	mov	r0, r5
 80005a4:	f000 f9f4 	bl	8000990 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80005a8:	b00b      	add	sp, #44	; 0x2c
 80005aa:	bd30      	pop	{r4, r5, pc}
 80005ac:	40023800 	.word	0x40023800
 80005b0:	40020000 	.word	0x40020000
 80005b4:	40020800 	.word	0x40020800

080005b8 <Error_Handler>:
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005b8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80005ba:	e7fe      	b.n	80005ba <Error_Handler+0x2>

080005bc <MX_USART2_UART_Init>:
{
 80005bc:	b508      	push	{r3, lr}
  huart2.Instance = USART2;
 80005be:	480a      	ldr	r0, [pc, #40]	; (80005e8 <MX_USART2_UART_Init+0x2c>)
 80005c0:	4b0a      	ldr	r3, [pc, #40]	; (80005ec <MX_USART2_UART_Init+0x30>)
 80005c2:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 80005c4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80005c8:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005ca:	2300      	movs	r3, #0
 80005cc:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005ce:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005d0:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005d2:	220c      	movs	r2, #12
 80005d4:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005d6:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005d8:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005da:	f000 ff88 	bl	80014ee <HAL_UART_Init>
 80005de:	b900      	cbnz	r0, 80005e2 <MX_USART2_UART_Init+0x26>
}
 80005e0:	bd08      	pop	{r3, pc}
    Error_Handler();
 80005e2:	f7ff ffe9 	bl	80005b8 <Error_Handler>
 80005e6:	bf00      	nop
 80005e8:	20000028 	.word	0x20000028
 80005ec:	40004400 	.word	0x40004400

080005f0 <SystemClock_Config>:
{
 80005f0:	b500      	push	{lr}
 80005f2:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005f4:	2234      	movs	r2, #52	; 0x34
 80005f6:	2100      	movs	r1, #0
 80005f8:	a807      	add	r0, sp, #28
 80005fa:	f001 f80e 	bl	800161a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005fe:	2300      	movs	r3, #0
 8000600:	9302      	str	r3, [sp, #8]
 8000602:	9303      	str	r3, [sp, #12]
 8000604:	9304      	str	r3, [sp, #16]
 8000606:	9305      	str	r3, [sp, #20]
 8000608:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 800060a:	9300      	str	r3, [sp, #0]
 800060c:	4a1f      	ldr	r2, [pc, #124]	; (800068c <SystemClock_Config+0x9c>)
 800060e:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8000610:	f041 5180 	orr.w	r1, r1, #268435456	; 0x10000000
 8000614:	6411      	str	r1, [r2, #64]	; 0x40
 8000616:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000618:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800061c:	9200      	str	r2, [sp, #0]
 800061e:	9a00      	ldr	r2, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000620:	9301      	str	r3, [sp, #4]
 8000622:	491b      	ldr	r1, [pc, #108]	; (8000690 <SystemClock_Config+0xa0>)
 8000624:	680a      	ldr	r2, [r1, #0]
 8000626:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800062a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800062e:	600a      	str	r2, [r1, #0]
 8000630:	680a      	ldr	r2, [r1, #0]
 8000632:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
 8000636:	9201      	str	r2, [sp, #4]
 8000638:	9a01      	ldr	r2, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800063a:	2202      	movs	r2, #2
 800063c:	9207      	str	r2, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800063e:	2101      	movs	r1, #1
 8000640:	910a      	str	r1, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000642:	2110      	movs	r1, #16
 8000644:	910b      	str	r1, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000646:	920d      	str	r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000648:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800064a:	910f      	str	r1, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800064c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000650:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000652:	2304      	movs	r3, #4
 8000654:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000656:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000658:	9213      	str	r2, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800065a:	a807      	add	r0, sp, #28
 800065c:	f000 fc2c 	bl	8000eb8 <HAL_RCC_OscConfig>
 8000660:	b980      	cbnz	r0, 8000684 <SystemClock_Config+0x94>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000662:	230f      	movs	r3, #15
 8000664:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000666:	2102      	movs	r1, #2
 8000668:	9103      	str	r1, [sp, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800066e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000672:	9205      	str	r2, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000674:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000676:	a802      	add	r0, sp, #8
 8000678:	f000 fa80 	bl	8000b7c <HAL_RCC_ClockConfig>
 800067c:	b920      	cbnz	r0, 8000688 <SystemClock_Config+0x98>
}
 800067e:	b015      	add	sp, #84	; 0x54
 8000680:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000684:	f7ff ff98 	bl	80005b8 <Error_Handler>
    Error_Handler();
 8000688:	f7ff ff96 	bl	80005b8 <Error_Handler>
 800068c:	40023800 	.word	0x40023800
 8000690:	40007000 	.word	0x40007000

08000694 <main>:
{
 8000694:	b500      	push	{lr}
 8000696:	b085      	sub	sp, #20
  HAL_Init();
 8000698:	f000 f8dc 	bl	8000854 <HAL_Init>
  SystemClock_Config();
 800069c:	f7ff ffa8 	bl	80005f0 <SystemClock_Config>
  MX_GPIO_Init();
 80006a0:	f7ff ff36 	bl	8000510 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006a4:	f7ff ff8a 	bl	80005bc <MX_USART2_UART_Init>
	char data[] = "Hell World\n\r";
 80006a8:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <main+0x3c>)
 80006aa:	46ec      	mov	ip, sp
 80006ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006ae:	e8ac 0007 	stmia.w	ip!, {r0, r1, r2}
 80006b2:	f88c 3000 	strb.w	r3, [ip]
		HAL_UART_Transmit(&huart2, (uint8_t*) data, strlen(data), 10);
 80006b6:	4668      	mov	r0, sp
 80006b8:	f7ff fda4 	bl	8000204 <strlen>
 80006bc:	230a      	movs	r3, #10
 80006be:	b282      	uxth	r2, r0
 80006c0:	4669      	mov	r1, sp
 80006c2:	4804      	ldr	r0, [pc, #16]	; (80006d4 <main+0x40>)
 80006c4:	f000 ff43 	bl	800154e <HAL_UART_Transmit>
		HAL_Delay(100);
 80006c8:	2064      	movs	r0, #100	; 0x64
 80006ca:	f000 f8ef 	bl	80008ac <HAL_Delay>
	while (1)
 80006ce:	e7f2      	b.n	80006b6 <main+0x22>
 80006d0:	0800168c 	.word	0x0800168c
 80006d4:	20000028 	.word	0x20000028

080006d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d8:	b500      	push	{lr}
 80006da:	b083      	sub	sp, #12
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006dc:	2100      	movs	r1, #0
 80006de:	9100      	str	r1, [sp, #0]
 80006e0:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <HAL_MspInit+0x3c>)
 80006e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80006e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80006e8:	645a      	str	r2, [r3, #68]	; 0x44
 80006ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80006ec:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80006f0:	9200      	str	r2, [sp, #0]
 80006f2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006f4:	9101      	str	r1, [sp, #4]
 80006f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006f8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80006fc:	641a      	str	r2, [r3, #64]	; 0x40
 80006fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000704:	9301      	str	r3, [sp, #4]
 8000706:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000708:	2007      	movs	r0, #7
 800070a:	f000 f8e3 	bl	80008d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800070e:	b003      	add	sp, #12
 8000710:	f85d fb04 	ldr.w	pc, [sp], #4
 8000714:	40023800 	.word	0x40023800

08000718 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000718:	b500      	push	{lr}
 800071a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071c:	2300      	movs	r3, #0
 800071e:	9303      	str	r3, [sp, #12]
 8000720:	9304      	str	r3, [sp, #16]
 8000722:	9305      	str	r3, [sp, #20]
 8000724:	9306      	str	r3, [sp, #24]
 8000726:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART2)
 8000728:	6802      	ldr	r2, [r0, #0]
 800072a:	4b15      	ldr	r3, [pc, #84]	; (8000780 <HAL_UART_MspInit+0x68>)
 800072c:	429a      	cmp	r2, r3
 800072e:	d002      	beq.n	8000736 <HAL_UART_MspInit+0x1e>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000730:	b009      	add	sp, #36	; 0x24
 8000732:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART2_CLK_ENABLE();
 8000736:	2100      	movs	r1, #0
 8000738:	9101      	str	r1, [sp, #4]
 800073a:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800073e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000740:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000744:	641a      	str	r2, [r3, #64]	; 0x40
 8000746:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000748:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800074c:	9201      	str	r2, [sp, #4]
 800074e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000750:	9102      	str	r1, [sp, #8]
 8000752:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000754:	f042 0201 	orr.w	r2, r2, #1
 8000758:	631a      	str	r2, [r3, #48]	; 0x30
 800075a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075c:	f003 0301 	and.w	r3, r3, #1
 8000760:	9302      	str	r3, [sp, #8]
 8000762:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000764:	230c      	movs	r3, #12
 8000766:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000768:	2302      	movs	r3, #2
 800076a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800076c:	2303      	movs	r3, #3
 800076e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000770:	2307      	movs	r3, #7
 8000772:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000774:	a903      	add	r1, sp, #12
 8000776:	4803      	ldr	r0, [pc, #12]	; (8000784 <HAL_UART_MspInit+0x6c>)
 8000778:	f000 f90a 	bl	8000990 <HAL_GPIO_Init>
}
 800077c:	e7d8      	b.n	8000730 <HAL_UART_MspInit+0x18>
 800077e:	bf00      	nop
 8000780:	40004400 	.word	0x40004400
 8000784:	40020000 	.word	0x40020000

08000788 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000788:	e7fe      	b.n	8000788 <NMI_Handler>

0800078a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800078a:	e7fe      	b.n	800078a <HardFault_Handler>

0800078c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800078c:	e7fe      	b.n	800078c <MemManage_Handler>

0800078e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800078e:	e7fe      	b.n	800078e <BusFault_Handler>

08000790 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000790:	e7fe      	b.n	8000790 <UsageFault_Handler>

08000792 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000792:	4770      	bx	lr

08000794 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000794:	4770      	bx	lr

08000796 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000796:	4770      	bx	lr

08000798 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000798:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800079a:	f000 f875 	bl	8000888 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800079e:	bd08      	pop	{r3, pc}

080007a0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007a0:	4a03      	ldr	r2, [pc, #12]	; (80007b0 <SystemInit+0x10>)
 80007a2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80007a6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007aa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007ae:	4770      	bx	lr
 80007b0:	e000ed00 	.word	0xe000ed00

080007b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80007b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007ec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80007b8:	f7ff fff2 	bl	80007a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80007bc:	480c      	ldr	r0, [pc, #48]	; (80007f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80007be:	490d      	ldr	r1, [pc, #52]	; (80007f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80007c0:	4a0d      	ldr	r2, [pc, #52]	; (80007f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80007c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007c4:	e002      	b.n	80007cc <LoopCopyDataInit>

080007c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007ca:	3304      	adds	r3, #4

080007cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007d0:	d3f9      	bcc.n	80007c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007d2:	4a0a      	ldr	r2, [pc, #40]	; (80007fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80007d4:	4c0a      	ldr	r4, [pc, #40]	; (8000800 <LoopFillZerobss+0x22>)
  movs r3, #0
 80007d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007d8:	e001      	b.n	80007de <LoopFillZerobss>

080007da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007dc:	3204      	adds	r2, #4

080007de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007e0:	d3fb      	bcc.n	80007da <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80007e2:	f000 ff23 	bl	800162c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80007e6:	f7ff ff55 	bl	8000694 <main>
  bx  lr    
 80007ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80007ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80007f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007f4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80007f8:	080016c4 	.word	0x080016c4
  ldr r2, =_sbss
 80007fc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000800:	20000074 	.word	0x20000074

08000804 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000804:	e7fe      	b.n	8000804 <ADC_IRQHandler>
	...

08000808 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000808:	b510      	push	{r4, lr}
 800080a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800080c:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <HAL_InitTick+0x40>)
 800080e:	781a      	ldrb	r2, [r3, #0]
 8000810:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000814:	fbb3 f3f2 	udiv	r3, r3, r2
 8000818:	4a0c      	ldr	r2, [pc, #48]	; (800084c <HAL_InitTick+0x44>)
 800081a:	6810      	ldr	r0, [r2, #0]
 800081c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000820:	f000 f8a2 	bl	8000968 <HAL_SYSTICK_Config>
 8000824:	b968      	cbnz	r0, 8000842 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000826:	2c0f      	cmp	r4, #15
 8000828:	d901      	bls.n	800082e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800082a:	2001      	movs	r0, #1
 800082c:	e00a      	b.n	8000844 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800082e:	2200      	movs	r2, #0
 8000830:	4621      	mov	r1, r4
 8000832:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000836:	f000 f85f 	bl	80008f8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800083a:	4b05      	ldr	r3, [pc, #20]	; (8000850 <HAL_InitTick+0x48>)
 800083c:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800083e:	2000      	movs	r0, #0
 8000840:	e000      	b.n	8000844 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000842:	2001      	movs	r0, #1
}
 8000844:	bd10      	pop	{r4, pc}
 8000846:	bf00      	nop
 8000848:	20000004 	.word	0x20000004
 800084c:	20000000 	.word	0x20000000
 8000850:	20000008 	.word	0x20000008

08000854 <HAL_Init>:
{
 8000854:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000856:	4b0b      	ldr	r3, [pc, #44]	; (8000884 <HAL_Init+0x30>)
 8000858:	681a      	ldr	r2, [r3, #0]
 800085a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800085e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000860:	681a      	ldr	r2, [r3, #0]
 8000862:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000866:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800086e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000870:	2003      	movs	r0, #3
 8000872:	f000 f82f 	bl	80008d4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000876:	2000      	movs	r0, #0
 8000878:	f7ff ffc6 	bl	8000808 <HAL_InitTick>
  HAL_MspInit();
 800087c:	f7ff ff2c 	bl	80006d8 <HAL_MspInit>
}
 8000880:	2000      	movs	r0, #0
 8000882:	bd08      	pop	{r3, pc}
 8000884:	40023c00 	.word	0x40023c00

08000888 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000888:	4a03      	ldr	r2, [pc, #12]	; (8000898 <HAL_IncTick+0x10>)
 800088a:	6811      	ldr	r1, [r2, #0]
 800088c:	4b03      	ldr	r3, [pc, #12]	; (800089c <HAL_IncTick+0x14>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	440b      	add	r3, r1
 8000892:	6013      	str	r3, [r2, #0]
}
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	20000070 	.word	0x20000070
 800089c:	20000004 	.word	0x20000004

080008a0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80008a0:	4b01      	ldr	r3, [pc, #4]	; (80008a8 <HAL_GetTick+0x8>)
 80008a2:	6818      	ldr	r0, [r3, #0]
}
 80008a4:	4770      	bx	lr
 80008a6:	bf00      	nop
 80008a8:	20000070 	.word	0x20000070

080008ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008ac:	b538      	push	{r3, r4, r5, lr}
 80008ae:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80008b0:	f7ff fff6 	bl	80008a0 <HAL_GetTick>
 80008b4:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008b6:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 80008ba:	d002      	beq.n	80008c2 <HAL_Delay+0x16>
  {
    wait += (uint32_t)(uwTickFreq);
 80008bc:	4b04      	ldr	r3, [pc, #16]	; (80008d0 <HAL_Delay+0x24>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80008c2:	f7ff ffed 	bl	80008a0 <HAL_GetTick>
 80008c6:	1b40      	subs	r0, r0, r5
 80008c8:	42a0      	cmp	r0, r4
 80008ca:	d3fa      	bcc.n	80008c2 <HAL_Delay+0x16>
  {
  }
}
 80008cc:	bd38      	pop	{r3, r4, r5, pc}
 80008ce:	bf00      	nop
 80008d0:	20000004 	.word	0x20000004

080008d4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008d4:	4a07      	ldr	r2, [pc, #28]	; (80008f4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80008d6:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008d8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80008dc:	041b      	lsls	r3, r3, #16
 80008de:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008e0:	0200      	lsls	r0, r0, #8
 80008e2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008e6:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 80008e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80008f0:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80008f2:	4770      	bx	lr
 80008f4:	e000ed00 	.word	0xe000ed00

080008f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008f8:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008fa:	4b19      	ldr	r3, [pc, #100]	; (8000960 <HAL_NVIC_SetPriority+0x68>)
 80008fc:	68db      	ldr	r3, [r3, #12]
 80008fe:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000902:	f1c3 0c07 	rsb	ip, r3, #7
 8000906:	f1bc 0f04 	cmp.w	ip, #4
 800090a:	bf28      	it	cs
 800090c:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000910:	f103 0e04 	add.w	lr, r3, #4
 8000914:	f1be 0f06 	cmp.w	lr, #6
 8000918:	d918      	bls.n	800094c <HAL_NVIC_SetPriority+0x54>
 800091a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800091c:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
 8000920:	fa0e fc0c 	lsl.w	ip, lr, ip
 8000924:	ea21 010c 	bic.w	r1, r1, ip
 8000928:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800092a:	fa0e fe03 	lsl.w	lr, lr, r3
 800092e:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000932:	430a      	orrs	r2, r1
  if ((int32_t)(IRQn) >= 0)
 8000934:	2800      	cmp	r0, #0
 8000936:	db0b      	blt.n	8000950 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000938:	0112      	lsls	r2, r2, #4
 800093a:	b2d2      	uxtb	r2, r2
 800093c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000940:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000944:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000948:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800094c:	2300      	movs	r3, #0
 800094e:	e7e5      	b.n	800091c <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000950:	f000 000f 	and.w	r0, r0, #15
 8000954:	0112      	lsls	r2, r2, #4
 8000956:	b2d2      	uxtb	r2, r2
 8000958:	4b02      	ldr	r3, [pc, #8]	; (8000964 <HAL_NVIC_SetPriority+0x6c>)
 800095a:	541a      	strb	r2, [r3, r0]
 800095c:	e7f4      	b.n	8000948 <HAL_NVIC_SetPriority+0x50>
 800095e:	bf00      	nop
 8000960:	e000ed00 	.word	0xe000ed00
 8000964:	e000ed14 	.word	0xe000ed14

08000968 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000968:	3801      	subs	r0, #1
 800096a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800096e:	d20b      	bcs.n	8000988 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000970:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8000974:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000976:	4a05      	ldr	r2, [pc, #20]	; (800098c <HAL_SYSTICK_Config+0x24>)
 8000978:	21f0      	movs	r1, #240	; 0xf0
 800097a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800097e:	2000      	movs	r0, #0
 8000980:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000982:	2207      	movs	r2, #7
 8000984:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000986:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000988:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800098a:	4770      	bx	lr
 800098c:	e000ed00 	.word	0xe000ed00

08000990 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000990:	2300      	movs	r3, #0
 8000992:	2b0f      	cmp	r3, #15
 8000994:	f200 80e3 	bhi.w	8000b5e <HAL_GPIO_Init+0x1ce>
{
 8000998:	b570      	push	{r4, r5, r6, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	e065      	b.n	8000a6a <HAL_GPIO_Init+0xda>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800099e:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80009a0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 80009a4:	2403      	movs	r4, #3
 80009a6:	fa04 f40e 	lsl.w	r4, r4, lr
 80009aa:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 80009ae:	68cc      	ldr	r4, [r1, #12]
 80009b0:	fa04 f40e 	lsl.w	r4, r4, lr
 80009b4:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 80009b6:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009b8:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009ba:	ea24 0402 	bic.w	r4, r4, r2
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009be:	684a      	ldr	r2, [r1, #4]
 80009c0:	f3c2 1200 	ubfx	r2, r2, #4, #1
 80009c4:	409a      	lsls	r2, r3
 80009c6:	4322      	orrs	r2, r4
        GPIOx->OTYPER = temp;
 80009c8:	6042      	str	r2, [r0, #4]
 80009ca:	e05c      	b.n	8000a86 <HAL_GPIO_Init+0xf6>
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80009cc:	08dc      	lsrs	r4, r3, #3
 80009ce:	3408      	adds	r4, #8
 80009d0:	f850 2024 	ldr.w	r2, [r0, r4, lsl #2]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80009d4:	f003 0507 	and.w	r5, r3, #7
 80009d8:	00ad      	lsls	r5, r5, #2
 80009da:	f04f 0e0f 	mov.w	lr, #15
 80009de:	fa0e fe05 	lsl.w	lr, lr, r5
 80009e2:	ea22 0e0e 	bic.w	lr, r2, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80009e6:	690a      	ldr	r2, [r1, #16]
 80009e8:	40aa      	lsls	r2, r5
 80009ea:	ea42 020e 	orr.w	r2, r2, lr
        GPIOx->AFR[position >> 3U] = temp;
 80009ee:	f840 2024 	str.w	r2, [r0, r4, lsl #2]
 80009f2:	e05c      	b.n	8000aae <HAL_GPIO_Init+0x11e>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009f4:	2206      	movs	r2, #6
 80009f6:	e000      	b.n	80009fa <HAL_GPIO_Init+0x6a>
 80009f8:	2200      	movs	r2, #0
 80009fa:	fa02 f20e 	lsl.w	r2, r2, lr
 80009fe:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a00:	3402      	adds	r4, #2
 8000a02:	4d57      	ldr	r5, [pc, #348]	; (8000b60 <HAL_GPIO_Init+0x1d0>)
 8000a04:	f845 2024 	str.w	r2, [r5, r4, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a08:	4a56      	ldr	r2, [pc, #344]	; (8000b64 <HAL_GPIO_Init+0x1d4>)
 8000a0a:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000a0c:	ea6f 020c 	mvn.w	r2, ip
 8000a10:	ea24 050c 	bic.w	r5, r4, ip
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000a14:	684e      	ldr	r6, [r1, #4]
 8000a16:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
 8000a1a:	d001      	beq.n	8000a20 <HAL_GPIO_Init+0x90>
        {
          temp |= iocurrent;
 8000a1c:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->RTSR = temp;
 8000a20:	4c50      	ldr	r4, [pc, #320]	; (8000b64 <HAL_GPIO_Init+0x1d4>)
 8000a22:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 8000a24:	68e4      	ldr	r4, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
 8000a26:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000a2a:	684e      	ldr	r6, [r1, #4]
 8000a2c:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8000a30:	d001      	beq.n	8000a36 <HAL_GPIO_Init+0xa6>
        {
          temp |= iocurrent;
 8000a32:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->FTSR = temp;
 8000a36:	4c4b      	ldr	r4, [pc, #300]	; (8000b64 <HAL_GPIO_Init+0x1d4>)
 8000a38:	60e5      	str	r5, [r4, #12]

        temp = EXTI->EMR;
 8000a3a:	6864      	ldr	r4, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
 8000a3c:	ea02 0504 	and.w	r5, r2, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000a40:	684e      	ldr	r6, [r1, #4]
 8000a42:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8000a46:	d001      	beq.n	8000a4c <HAL_GPIO_Init+0xbc>
        {
          temp |= iocurrent;
 8000a48:	ea4c 0504 	orr.w	r5, ip, r4
        }
        EXTI->EMR = temp;
 8000a4c:	4c45      	ldr	r4, [pc, #276]	; (8000b64 <HAL_GPIO_Init+0x1d4>)
 8000a4e:	6065      	str	r5, [r4, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a50:	6824      	ldr	r4, [r4, #0]
        temp &= ~((uint32_t)iocurrent);
 8000a52:	4022      	ands	r2, r4
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000a54:	684d      	ldr	r5, [r1, #4]
 8000a56:	f415 3f80 	tst.w	r5, #65536	; 0x10000
 8000a5a:	d001      	beq.n	8000a60 <HAL_GPIO_Init+0xd0>
        {
          temp |= iocurrent;
 8000a5c:	ea4c 0204 	orr.w	r2, ip, r4
        }
        EXTI->IMR = temp;
 8000a60:	4c40      	ldr	r4, [pc, #256]	; (8000b64 <HAL_GPIO_Init+0x1d4>)
 8000a62:	6022      	str	r2, [r4, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000a64:	3301      	adds	r3, #1
 8000a66:	2b0f      	cmp	r3, #15
 8000a68:	d877      	bhi.n	8000b5a <HAL_GPIO_Init+0x1ca>
    ioposition = 0x01U << position;
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	409a      	lsls	r2, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a6e:	680c      	ldr	r4, [r1, #0]
 8000a70:	ea04 0c02 	and.w	ip, r4, r2
    if(iocurrent == ioposition)
 8000a74:	ea32 0404 	bics.w	r4, r2, r4
 8000a78:	d1f4      	bne.n	8000a64 <HAL_GPIO_Init+0xd4>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000a7a:	684c      	ldr	r4, [r1, #4]
 8000a7c:	f004 0403 	and.w	r4, r4, #3
 8000a80:	3c01      	subs	r4, #1
 8000a82:	2c01      	cmp	r4, #1
 8000a84:	d98b      	bls.n	800099e <HAL_GPIO_Init+0xe>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a86:	684a      	ldr	r2, [r1, #4]
 8000a88:	f002 0203 	and.w	r2, r2, #3
 8000a8c:	2a03      	cmp	r2, #3
 8000a8e:	d009      	beq.n	8000aa4 <HAL_GPIO_Init+0x114>
        temp = GPIOx->PUPDR;
 8000a90:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000a92:	005d      	lsls	r5, r3, #1
 8000a94:	2203      	movs	r2, #3
 8000a96:	40aa      	lsls	r2, r5
 8000a98:	ea24 0402 	bic.w	r4, r4, r2
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a9c:	688a      	ldr	r2, [r1, #8]
 8000a9e:	40aa      	lsls	r2, r5
 8000aa0:	4322      	orrs	r2, r4
        GPIOx->PUPDR = temp;
 8000aa2:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000aa4:	684a      	ldr	r2, [r1, #4]
 8000aa6:	f002 0203 	and.w	r2, r2, #3
 8000aaa:	2a02      	cmp	r2, #2
 8000aac:	d08e      	beq.n	80009cc <HAL_GPIO_Init+0x3c>
      temp = GPIOx->MODER;
 8000aae:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ab0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8000ab4:	2203      	movs	r2, #3
 8000ab6:	fa02 f20e 	lsl.w	r2, r2, lr
 8000aba:	ea24 0402 	bic.w	r4, r4, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000abe:	684a      	ldr	r2, [r1, #4]
 8000ac0:	f002 0203 	and.w	r2, r2, #3
 8000ac4:	fa02 f20e 	lsl.w	r2, r2, lr
 8000ac8:	4322      	orrs	r2, r4
      GPIOx->MODER = temp;
 8000aca:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000acc:	684a      	ldr	r2, [r1, #4]
 8000ace:	f412 3f40 	tst.w	r2, #196608	; 0x30000
 8000ad2:	d0c7      	beq.n	8000a64 <HAL_GPIO_Init+0xd4>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	9201      	str	r2, [sp, #4]
 8000ad8:	4a23      	ldr	r2, [pc, #140]	; (8000b68 <HAL_GPIO_Init+0x1d8>)
 8000ada:	6c54      	ldr	r4, [r2, #68]	; 0x44
 8000adc:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8000ae0:	6454      	str	r4, [r2, #68]	; 0x44
 8000ae2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8000ae4:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000ae8:	9201      	str	r2, [sp, #4]
 8000aea:	9a01      	ldr	r2, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8000aec:	089c      	lsrs	r4, r3, #2
 8000aee:	1ca5      	adds	r5, r4, #2
 8000af0:	4a1b      	ldr	r2, [pc, #108]	; (8000b60 <HAL_GPIO_Init+0x1d0>)
 8000af2:	f852 5025 	ldr.w	r5, [r2, r5, lsl #2]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000af6:	f003 0e03 	and.w	lr, r3, #3
 8000afa:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000afe:	220f      	movs	r2, #15
 8000b00:	fa02 f20e 	lsl.w	r2, r2, lr
 8000b04:	ea25 0502 	bic.w	r5, r5, r2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b08:	4a18      	ldr	r2, [pc, #96]	; (8000b6c <HAL_GPIO_Init+0x1dc>)
 8000b0a:	4290      	cmp	r0, r2
 8000b0c:	f43f af74 	beq.w	80009f8 <HAL_GPIO_Init+0x68>
 8000b10:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000b14:	4290      	cmp	r0, r2
 8000b16:	d016      	beq.n	8000b46 <HAL_GPIO_Init+0x1b6>
 8000b18:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000b1c:	4290      	cmp	r0, r2
 8000b1e:	d014      	beq.n	8000b4a <HAL_GPIO_Init+0x1ba>
 8000b20:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000b24:	4290      	cmp	r0, r2
 8000b26:	d012      	beq.n	8000b4e <HAL_GPIO_Init+0x1be>
 8000b28:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000b2c:	4290      	cmp	r0, r2
 8000b2e:	d010      	beq.n	8000b52 <HAL_GPIO_Init+0x1c2>
 8000b30:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000b34:	4290      	cmp	r0, r2
 8000b36:	d00e      	beq.n	8000b56 <HAL_GPIO_Init+0x1c6>
 8000b38:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000b3c:	4290      	cmp	r0, r2
 8000b3e:	f43f af59 	beq.w	80009f4 <HAL_GPIO_Init+0x64>
 8000b42:	2207      	movs	r2, #7
 8000b44:	e759      	b.n	80009fa <HAL_GPIO_Init+0x6a>
 8000b46:	2201      	movs	r2, #1
 8000b48:	e757      	b.n	80009fa <HAL_GPIO_Init+0x6a>
 8000b4a:	2202      	movs	r2, #2
 8000b4c:	e755      	b.n	80009fa <HAL_GPIO_Init+0x6a>
 8000b4e:	2203      	movs	r2, #3
 8000b50:	e753      	b.n	80009fa <HAL_GPIO_Init+0x6a>
 8000b52:	2204      	movs	r2, #4
 8000b54:	e751      	b.n	80009fa <HAL_GPIO_Init+0x6a>
 8000b56:	2205      	movs	r2, #5
 8000b58:	e74f      	b.n	80009fa <HAL_GPIO_Init+0x6a>
      }
    }
  }
}
 8000b5a:	b002      	add	sp, #8
 8000b5c:	bd70      	pop	{r4, r5, r6, pc}
 8000b5e:	4770      	bx	lr
 8000b60:	40013800 	.word	0x40013800
 8000b64:	40013c00 	.word	0x40013c00
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40020000 	.word	0x40020000

08000b70 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b70:	b10a      	cbz	r2, 8000b76 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b72:	6181      	str	r1, [r0, #24]
 8000b74:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b76:	0409      	lsls	r1, r1, #16
 8000b78:	6181      	str	r1, [r0, #24]
  }
}
 8000b7a:	4770      	bx	lr

08000b7c <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8000b7c:	2800      	cmp	r0, #0
 8000b7e:	f000 809b 	beq.w	8000cb8 <HAL_RCC_ClockConfig+0x13c>
{
 8000b82:	b570      	push	{r4, r5, r6, lr}
 8000b84:	460d      	mov	r5, r1
 8000b86:	4604      	mov	r4, r0
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8000b88:	4b4f      	ldr	r3, [pc, #316]	; (8000cc8 <HAL_RCC_ClockConfig+0x14c>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f003 030f 	and.w	r3, r3, #15
 8000b90:	428b      	cmp	r3, r1
 8000b92:	d208      	bcs.n	8000ba6 <HAL_RCC_ClockConfig+0x2a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b94:	b2cb      	uxtb	r3, r1
 8000b96:	4a4c      	ldr	r2, [pc, #304]	; (8000cc8 <HAL_RCC_ClockConfig+0x14c>)
 8000b98:	7013      	strb	r3, [r2, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000b9a:	6813      	ldr	r3, [r2, #0]
 8000b9c:	f003 030f 	and.w	r3, r3, #15
 8000ba0:	428b      	cmp	r3, r1
 8000ba2:	f040 808b 	bne.w	8000cbc <HAL_RCC_ClockConfig+0x140>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000ba6:	6823      	ldr	r3, [r4, #0]
 8000ba8:	f013 0f02 	tst.w	r3, #2
 8000bac:	d017      	beq.n	8000bde <HAL_RCC_ClockConfig+0x62>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000bae:	f013 0f04 	tst.w	r3, #4
 8000bb2:	d004      	beq.n	8000bbe <HAL_RCC_ClockConfig+0x42>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000bb4:	4a45      	ldr	r2, [pc, #276]	; (8000ccc <HAL_RCC_ClockConfig+0x150>)
 8000bb6:	6893      	ldr	r3, [r2, #8]
 8000bb8:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000bbc:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000bbe:	6823      	ldr	r3, [r4, #0]
 8000bc0:	f013 0f08 	tst.w	r3, #8
 8000bc4:	d004      	beq.n	8000bd0 <HAL_RCC_ClockConfig+0x54>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000bc6:	4a41      	ldr	r2, [pc, #260]	; (8000ccc <HAL_RCC_ClockConfig+0x150>)
 8000bc8:	6893      	ldr	r3, [r2, #8]
 8000bca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000bce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000bd0:	4a3e      	ldr	r2, [pc, #248]	; (8000ccc <HAL_RCC_ClockConfig+0x150>)
 8000bd2:	6893      	ldr	r3, [r2, #8]
 8000bd4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000bd8:	68a1      	ldr	r1, [r4, #8]
 8000bda:	430b      	orrs	r3, r1
 8000bdc:	6093      	str	r3, [r2, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000bde:	6823      	ldr	r3, [r4, #0]
 8000be0:	f013 0f01 	tst.w	r3, #1
 8000be4:	d032      	beq.n	8000c4c <HAL_RCC_ClockConfig+0xd0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000be6:	6863      	ldr	r3, [r4, #4]
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d021      	beq.n	8000c30 <HAL_RCC_ClockConfig+0xb4>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000bec:	1e9a      	subs	r2, r3, #2
 8000bee:	2a01      	cmp	r2, #1
 8000bf0:	d925      	bls.n	8000c3e <HAL_RCC_ClockConfig+0xc2>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bf2:	4a36      	ldr	r2, [pc, #216]	; (8000ccc <HAL_RCC_ClockConfig+0x150>)
 8000bf4:	6812      	ldr	r2, [r2, #0]
 8000bf6:	f012 0f02 	tst.w	r2, #2
 8000bfa:	d061      	beq.n	8000cc0 <HAL_RCC_ClockConfig+0x144>
      {
        return HAL_ERROR;
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000bfc:	4933      	ldr	r1, [pc, #204]	; (8000ccc <HAL_RCC_ClockConfig+0x150>)
 8000bfe:	688a      	ldr	r2, [r1, #8]
 8000c00:	f022 0203 	bic.w	r2, r2, #3
 8000c04:	4313      	orrs	r3, r2
 8000c06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000c08:	f7ff fe4a 	bl	80008a0 <HAL_GetTick>
 8000c0c:	4606      	mov	r6, r0

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000c0e:	4b2f      	ldr	r3, [pc, #188]	; (8000ccc <HAL_RCC_ClockConfig+0x150>)
 8000c10:	689b      	ldr	r3, [r3, #8]
 8000c12:	f003 030c 	and.w	r3, r3, #12
 8000c16:	6862      	ldr	r2, [r4, #4]
 8000c18:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000c1c:	d016      	beq.n	8000c4c <HAL_RCC_ClockConfig+0xd0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c1e:	f7ff fe3f 	bl	80008a0 <HAL_GetTick>
 8000c22:	1b80      	subs	r0, r0, r6
 8000c24:	f241 3388 	movw	r3, #5000	; 0x1388
 8000c28:	4298      	cmp	r0, r3
 8000c2a:	d9f0      	bls.n	8000c0e <HAL_RCC_ClockConfig+0x92>
      {
        return HAL_TIMEOUT;
 8000c2c:	2003      	movs	r0, #3
 8000c2e:	e042      	b.n	8000cb6 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c30:	4a26      	ldr	r2, [pc, #152]	; (8000ccc <HAL_RCC_ClockConfig+0x150>)
 8000c32:	6812      	ldr	r2, [r2, #0]
 8000c34:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8000c38:	d1e0      	bne.n	8000bfc <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8000c3a:	2001      	movs	r0, #1
 8000c3c:	e03b      	b.n	8000cb6 <HAL_RCC_ClockConfig+0x13a>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000c3e:	4a23      	ldr	r2, [pc, #140]	; (8000ccc <HAL_RCC_ClockConfig+0x150>)
 8000c40:	6812      	ldr	r2, [r2, #0]
 8000c42:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8000c46:	d1d9      	bne.n	8000bfc <HAL_RCC_ClockConfig+0x80>
        return HAL_ERROR;
 8000c48:	2001      	movs	r0, #1
 8000c4a:	e034      	b.n	8000cb6 <HAL_RCC_ClockConfig+0x13a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8000c4c:	4b1e      	ldr	r3, [pc, #120]	; (8000cc8 <HAL_RCC_ClockConfig+0x14c>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	f003 030f 	and.w	r3, r3, #15
 8000c54:	42ab      	cmp	r3, r5
 8000c56:	d907      	bls.n	8000c68 <HAL_RCC_ClockConfig+0xec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c58:	b2ea      	uxtb	r2, r5
 8000c5a:	4b1b      	ldr	r3, [pc, #108]	; (8000cc8 <HAL_RCC_ClockConfig+0x14c>)
 8000c5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f003 030f 	and.w	r3, r3, #15
 8000c64:	42ab      	cmp	r3, r5
 8000c66:	d12d      	bne.n	8000cc4 <HAL_RCC_ClockConfig+0x148>
      return HAL_ERROR;
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c68:	6823      	ldr	r3, [r4, #0]
 8000c6a:	f013 0f04 	tst.w	r3, #4
 8000c6e:	d006      	beq.n	8000c7e <HAL_RCC_ClockConfig+0x102>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c70:	4a16      	ldr	r2, [pc, #88]	; (8000ccc <HAL_RCC_ClockConfig+0x150>)
 8000c72:	6893      	ldr	r3, [r2, #8]
 8000c74:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000c78:	68e1      	ldr	r1, [r4, #12]
 8000c7a:	430b      	orrs	r3, r1
 8000c7c:	6093      	str	r3, [r2, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c7e:	6823      	ldr	r3, [r4, #0]
 8000c80:	f013 0f08 	tst.w	r3, #8
 8000c84:	d007      	beq.n	8000c96 <HAL_RCC_ClockConfig+0x11a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000c86:	4a11      	ldr	r2, [pc, #68]	; (8000ccc <HAL_RCC_ClockConfig+0x150>)
 8000c88:	6893      	ldr	r3, [r2, #8]
 8000c8a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000c8e:	6921      	ldr	r1, [r4, #16]
 8000c90:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000c94:	6093      	str	r3, [r2, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8000c96:	f000 f847 	bl	8000d28 <HAL_RCC_GetSysClockFreq>
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <HAL_RCC_ClockConfig+0x150>)
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000ca2:	4a0b      	ldr	r2, [pc, #44]	; (8000cd0 <HAL_RCC_ClockConfig+0x154>)
 8000ca4:	5cd3      	ldrb	r3, [r2, r3]
 8000ca6:	40d8      	lsrs	r0, r3
 8000ca8:	4b0a      	ldr	r3, [pc, #40]	; (8000cd4 <HAL_RCC_ClockConfig+0x158>)
 8000caa:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8000cac:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <HAL_RCC_ClockConfig+0x15c>)
 8000cae:	6818      	ldr	r0, [r3, #0]
 8000cb0:	f7ff fdaa 	bl	8000808 <HAL_InitTick>

  return HAL_OK;
 8000cb4:	2000      	movs	r0, #0
}
 8000cb6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000cb8:	2001      	movs	r0, #1
}
 8000cba:	4770      	bx	lr
      return HAL_ERROR;
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	e7fa      	b.n	8000cb6 <HAL_RCC_ClockConfig+0x13a>
        return HAL_ERROR;
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	e7f8      	b.n	8000cb6 <HAL_RCC_ClockConfig+0x13a>
      return HAL_ERROR;
 8000cc4:	2001      	movs	r0, #1
 8000cc6:	e7f6      	b.n	8000cb6 <HAL_RCC_ClockConfig+0x13a>
 8000cc8:	40023c00 	.word	0x40023c00
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	0800169c 	.word	0x0800169c
 8000cd4:	20000000 	.word	0x20000000
 8000cd8:	20000008 	.word	0x20000008

08000cdc <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8000cdc:	4b01      	ldr	r3, [pc, #4]	; (8000ce4 <HAL_RCC_GetHCLKFreq+0x8>)
 8000cde:	6818      	ldr	r0, [r3, #0]
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	20000000 	.word	0x20000000

08000ce8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000ce8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8000cea:	f7ff fff7 	bl	8000cdc <HAL_RCC_GetHCLKFreq>
 8000cee:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000cf6:	4a03      	ldr	r2, [pc, #12]	; (8000d04 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000cf8:	5cd3      	ldrb	r3, [r2, r3]
}
 8000cfa:	40d8      	lsrs	r0, r3
 8000cfc:	bd08      	pop	{r3, pc}
 8000cfe:	bf00      	nop
 8000d00:	40023800 	.word	0x40023800
 8000d04:	080016ac 	.word	0x080016ac

08000d08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8000d08:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000d0a:	f7ff ffe7 	bl	8000cdc <HAL_RCC_GetHCLKFreq>
 8000d0e:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000d10:	689b      	ldr	r3, [r3, #8]
 8000d12:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000d16:	4a03      	ldr	r2, [pc, #12]	; (8000d24 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000d18:	5cd3      	ldrb	r3, [r2, r3]
}
 8000d1a:	40d8      	lsrs	r0, r3
 8000d1c:	bd08      	pop	{r3, pc}
 8000d1e:	bf00      	nop
 8000d20:	40023800 	.word	0x40023800
 8000d24:	080016ac 	.word	0x080016ac

08000d28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000d28:	b508      	push	{r3, lr}
  uint32_t pllp = 0U;
  uint32_t pllr = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000d2a:	4b60      	ldr	r3, [pc, #384]	; (8000eac <HAL_RCC_GetSysClockFreq+0x184>)
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	f003 030c 	and.w	r3, r3, #12
 8000d32:	2b08      	cmp	r3, #8
 8000d34:	d007      	beq.n	8000d46 <HAL_RCC_GetSysClockFreq+0x1e>
 8000d36:	2b0c      	cmp	r3, #12
 8000d38:	d05f      	beq.n	8000dfa <HAL_RCC_GetSysClockFreq+0xd2>
 8000d3a:	2b04      	cmp	r3, #4
 8000d3c:	d001      	beq.n	8000d42 <HAL_RCC_GetSysClockFreq+0x1a>
 8000d3e:	485c      	ldr	r0, [pc, #368]	; (8000eb0 <HAL_RCC_GetSysClockFreq+0x188>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000d40:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8000d42:	485c      	ldr	r0, [pc, #368]	; (8000eb4 <HAL_RCC_GetSysClockFreq+0x18c>)
 8000d44:	e7fc      	b.n	8000d40 <HAL_RCC_GetSysClockFreq+0x18>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000d46:	4b59      	ldr	r3, [pc, #356]	; (8000eac <HAL_RCC_GetSysClockFreq+0x184>)
 8000d48:	685a      	ldr	r2, [r3, #4]
 8000d4a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000d54:	d02c      	beq.n	8000db0 <HAL_RCC_GetSysClockFreq+0x88>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000d56:	4b55      	ldr	r3, [pc, #340]	; (8000eac <HAL_RCC_GetSysClockFreq+0x184>)
 8000d58:	6858      	ldr	r0, [r3, #4]
 8000d5a:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8000d5e:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8000d62:	ebbc 0c00 	subs.w	ip, ip, r0
 8000d66:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8000d6a:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8000d6e:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8000d72:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8000d76:	ebb1 010c 	subs.w	r1, r1, ip
 8000d7a:	eb63 030e 	sbc.w	r3, r3, lr
 8000d7e:	00db      	lsls	r3, r3, #3
 8000d80:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8000d84:	00c9      	lsls	r1, r1, #3
 8000d86:	eb11 0c00 	adds.w	ip, r1, r0
 8000d8a:	f143 0300 	adc.w	r3, r3, #0
 8000d8e:	0259      	lsls	r1, r3, #9
 8000d90:	2300      	movs	r3, #0
 8000d92:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8000d96:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8000d9a:	f7ff fa3b 	bl	8000214 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8000d9e:	4b43      	ldr	r3, [pc, #268]	; (8000eac <HAL_RCC_GetSysClockFreq+0x184>)
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000da6:	3301      	adds	r3, #1
 8000da8:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 8000daa:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8000dae:	e7c7      	b.n	8000d40 <HAL_RCC_GetSysClockFreq+0x18>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000db0:	4b3e      	ldr	r3, [pc, #248]	; (8000eac <HAL_RCC_GetSysClockFreq+0x184>)
 8000db2:	6858      	ldr	r0, [r3, #4]
 8000db4:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8000db8:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8000dbc:	ebbc 0c00 	subs.w	ip, ip, r0
 8000dc0:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8000dc4:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8000dc8:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8000dcc:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8000dd0:	ebb1 010c 	subs.w	r1, r1, ip
 8000dd4:	eb63 030e 	sbc.w	r3, r3, lr
 8000dd8:	00db      	lsls	r3, r3, #3
 8000dda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8000dde:	00c9      	lsls	r1, r1, #3
 8000de0:	eb11 0c00 	adds.w	ip, r1, r0
 8000de4:	f143 0300 	adc.w	r3, r3, #0
 8000de8:	0299      	lsls	r1, r3, #10
 8000dea:	2300      	movs	r3, #0
 8000dec:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8000df0:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8000df4:	f7ff fa0e 	bl	8000214 <__aeabi_uldivmod>
 8000df8:	e7d1      	b.n	8000d9e <HAL_RCC_GetSysClockFreq+0x76>
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000dfa:	4b2c      	ldr	r3, [pc, #176]	; (8000eac <HAL_RCC_GetSysClockFreq+0x184>)
 8000dfc:	685a      	ldr	r2, [r3, #4]
 8000dfe:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000e08:	d02a      	beq.n	8000e60 <HAL_RCC_GetSysClockFreq+0x138>
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e0a:	4b28      	ldr	r3, [pc, #160]	; (8000eac <HAL_RCC_GetSysClockFreq+0x184>)
 8000e0c:	6858      	ldr	r0, [r3, #4]
 8000e0e:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8000e12:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8000e16:	ebbc 0c00 	subs.w	ip, ip, r0
 8000e1a:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8000e1e:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8000e22:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8000e26:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8000e2a:	ebb1 010c 	subs.w	r1, r1, ip
 8000e2e:	eb63 030e 	sbc.w	r3, r3, lr
 8000e32:	00db      	lsls	r3, r3, #3
 8000e34:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8000e38:	00c9      	lsls	r1, r1, #3
 8000e3a:	eb11 0c00 	adds.w	ip, r1, r0
 8000e3e:	f143 0300 	adc.w	r3, r3, #0
 8000e42:	0259      	lsls	r1, r3, #9
 8000e44:	2300      	movs	r3, #0
 8000e46:	ea4f 204c 	mov.w	r0, ip, lsl #9
 8000e4a:	ea41 51dc 	orr.w	r1, r1, ip, lsr #23
 8000e4e:	f7ff f9e1 	bl	8000214 <__aeabi_uldivmod>
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8000e52:	4b16      	ldr	r3, [pc, #88]	; (8000eac <HAL_RCC_GetSysClockFreq+0x184>)
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f3c3 7302 	ubfx	r3, r3, #28, #3
      sysclockfreq = pllvco / pllr;
 8000e5a:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8000e5e:	e76f      	b.n	8000d40 <HAL_RCC_GetSysClockFreq+0x18>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000e60:	4b12      	ldr	r3, [pc, #72]	; (8000eac <HAL_RCC_GetSysClockFreq+0x184>)
 8000e62:	6858      	ldr	r0, [r3, #4]
 8000e64:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8000e68:	ea4f 1c40 	mov.w	ip, r0, lsl #5
 8000e6c:	ebbc 0c00 	subs.w	ip, ip, r0
 8000e70:	eb6e 0e0e 	sbc.w	lr, lr, lr
 8000e74:	ea4f 138e 	mov.w	r3, lr, lsl #6
 8000e78:	ea43 639c 	orr.w	r3, r3, ip, lsr #26
 8000e7c:	ea4f 118c 	mov.w	r1, ip, lsl #6
 8000e80:	ebb1 010c 	subs.w	r1, r1, ip
 8000e84:	eb63 030e 	sbc.w	r3, r3, lr
 8000e88:	00db      	lsls	r3, r3, #3
 8000e8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8000e8e:	00c9      	lsls	r1, r1, #3
 8000e90:	eb11 0c00 	adds.w	ip, r1, r0
 8000e94:	f143 0300 	adc.w	r3, r3, #0
 8000e98:	0299      	lsls	r1, r3, #10
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	ea4f 208c 	mov.w	r0, ip, lsl #10
 8000ea0:	ea41 519c 	orr.w	r1, r1, ip, lsr #22
 8000ea4:	f7ff f9b6 	bl	8000214 <__aeabi_uldivmod>
 8000ea8:	e7d3      	b.n	8000e52 <HAL_RCC_GetSysClockFreq+0x12a>
 8000eaa:	bf00      	nop
 8000eac:	40023800 	.word	0x40023800
 8000eb0:	00f42400 	.word	0x00f42400
 8000eb4:	007a1200 	.word	0x007a1200

08000eb8 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000eb8:	2800      	cmp	r0, #0
 8000eba:	f000 8201 	beq.w	80012c0 <HAL_RCC_OscConfig+0x408>
{
 8000ebe:	b570      	push	{r4, r5, r6, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	4604      	mov	r4, r0
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ec4:	6803      	ldr	r3, [r0, #0]
 8000ec6:	f013 0f01 	tst.w	r3, #1
 8000eca:	d041      	beq.n	8000f50 <HAL_RCC_OscConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8000ecc:	4b99      	ldr	r3, [pc, #612]	; (8001134 <HAL_RCC_OscConfig+0x27c>)
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	f003 030c 	and.w	r3, r3, #12
 8000ed4:	2b04      	cmp	r3, #4
 8000ed6:	d032      	beq.n	8000f3e <HAL_RCC_OscConfig+0x86>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8000ed8:	4b96      	ldr	r3, [pc, #600]	; (8001134 <HAL_RCC_OscConfig+0x27c>)
 8000eda:	689b      	ldr	r3, [r3, #8]
 8000edc:	f003 030c 	and.w	r3, r3, #12
        || \
 8000ee0:	2b08      	cmp	r3, #8
 8000ee2:	d027      	beq.n	8000f34 <HAL_RCC_OscConfig+0x7c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000ee4:	4b93      	ldr	r3, [pc, #588]	; (8001134 <HAL_RCC_OscConfig+0x27c>)
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8000eec:	2b0c      	cmp	r3, #12
 8000eee:	d059      	beq.n	8000fa4 <HAL_RCC_OscConfig+0xec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ef0:	6863      	ldr	r3, [r4, #4]
 8000ef2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ef6:	d05b      	beq.n	8000fb0 <HAL_RCC_OscConfig+0xf8>
 8000ef8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000efc:	d05e      	beq.n	8000fbc <HAL_RCC_OscConfig+0x104>
 8000efe:	4b8d      	ldr	r3, [pc, #564]	; (8001134 <HAL_RCC_OscConfig+0x27c>)
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000f0e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f10:	6863      	ldr	r3, [r4, #4]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d05c      	beq.n	8000fd0 <HAL_RCC_OscConfig+0x118>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f16:	f7ff fcc3 	bl	80008a0 <HAL_GetTick>
 8000f1a:	4605      	mov	r5, r0

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f1c:	4b85      	ldr	r3, [pc, #532]	; (8001134 <HAL_RCC_OscConfig+0x27c>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000f24:	d114      	bne.n	8000f50 <HAL_RCC_OscConfig+0x98>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f26:	f7ff fcbb 	bl	80008a0 <HAL_GetTick>
 8000f2a:	1b40      	subs	r0, r0, r5
 8000f2c:	2864      	cmp	r0, #100	; 0x64
 8000f2e:	d9f5      	bls.n	8000f1c <HAL_RCC_OscConfig+0x64>
          {
            return HAL_TIMEOUT;
 8000f30:	2003      	movs	r0, #3
 8000f32:	e1cc      	b.n	80012ce <HAL_RCC_OscConfig+0x416>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8000f34:	4b7f      	ldr	r3, [pc, #508]	; (8001134 <HAL_RCC_OscConfig+0x27c>)
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000f3c:	d0d2      	beq.n	8000ee4 <HAL_RCC_OscConfig+0x2c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f3e:	4b7d      	ldr	r3, [pc, #500]	; (8001134 <HAL_RCC_OscConfig+0x27c>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000f46:	d003      	beq.n	8000f50 <HAL_RCC_OscConfig+0x98>
 8000f48:	6863      	ldr	r3, [r4, #4]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	f000 81ba 	beq.w	80012c4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000f50:	6823      	ldr	r3, [r4, #0]
 8000f52:	f013 0f02 	tst.w	r3, #2
 8000f56:	d060      	beq.n	800101a <HAL_RCC_OscConfig+0x162>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8000f58:	4b76      	ldr	r3, [pc, #472]	; (8001134 <HAL_RCC_OscConfig+0x27c>)
 8000f5a:	689b      	ldr	r3, [r3, #8]
 8000f5c:	f013 0f0c 	tst.w	r3, #12
 8000f60:	d04a      	beq.n	8000ff8 <HAL_RCC_OscConfig+0x140>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8000f62:	4b74      	ldr	r3, [pc, #464]	; (8001134 <HAL_RCC_OscConfig+0x27c>)
 8000f64:	689b      	ldr	r3, [r3, #8]
 8000f66:	f003 030c 	and.w	r3, r3, #12
        || \
 8000f6a:	2b08      	cmp	r3, #8
 8000f6c:	d03f      	beq.n	8000fee <HAL_RCC_OscConfig+0x136>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f6e:	4b71      	ldr	r3, [pc, #452]	; (8001134 <HAL_RCC_OscConfig+0x27c>)
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8000f76:	2b0c      	cmp	r3, #12
 8000f78:	d069      	beq.n	800104e <HAL_RCC_OscConfig+0x196>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8000f7a:	68e3      	ldr	r3, [r4, #12]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d075      	beq.n	800106c <HAL_RCC_OscConfig+0x1b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f80:	4b6d      	ldr	r3, [pc, #436]	; (8001138 <HAL_RCC_OscConfig+0x280>)
 8000f82:	2201      	movs	r2, #1
 8000f84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f86:	f7ff fc8b 	bl	80008a0 <HAL_GetTick>
 8000f8a:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f8c:	4b69      	ldr	r3, [pc, #420]	; (8001134 <HAL_RCC_OscConfig+0x27c>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f013 0f02 	tst.w	r3, #2
 8000f94:	d161      	bne.n	800105a <HAL_RCC_OscConfig+0x1a2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f96:	f7ff fc83 	bl	80008a0 <HAL_GetTick>
 8000f9a:	1b40      	subs	r0, r0, r5
 8000f9c:	2802      	cmp	r0, #2
 8000f9e:	d9f5      	bls.n	8000f8c <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 8000fa0:	2003      	movs	r0, #3
 8000fa2:	e194      	b.n	80012ce <HAL_RCC_OscConfig+0x416>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fa4:	4b63      	ldr	r3, [pc, #396]	; (8001134 <HAL_RCC_OscConfig+0x27c>)
 8000fa6:	685b      	ldr	r3, [r3, #4]
 8000fa8:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000fac:	d0a0      	beq.n	8000ef0 <HAL_RCC_OscConfig+0x38>
 8000fae:	e7c6      	b.n	8000f3e <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fb0:	4a60      	ldr	r2, [pc, #384]	; (8001134 <HAL_RCC_OscConfig+0x27c>)
 8000fb2:	6813      	ldr	r3, [r2, #0]
 8000fb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fb8:	6013      	str	r3, [r2, #0]
 8000fba:	e7a9      	b.n	8000f10 <HAL_RCC_OscConfig+0x58>
 8000fbc:	4b5d      	ldr	r3, [pc, #372]	; (8001134 <HAL_RCC_OscConfig+0x27c>)
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	e79f      	b.n	8000f10 <HAL_RCC_OscConfig+0x58>
        tickstart = HAL_GetTick();
 8000fd0:	f7ff fc66 	bl	80008a0 <HAL_GetTick>
 8000fd4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fd6:	4b57      	ldr	r3, [pc, #348]	; (8001134 <HAL_RCC_OscConfig+0x27c>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8000fde:	d0b7      	beq.n	8000f50 <HAL_RCC_OscConfig+0x98>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fe0:	f7ff fc5e 	bl	80008a0 <HAL_GetTick>
 8000fe4:	1b40      	subs	r0, r0, r5
 8000fe6:	2864      	cmp	r0, #100	; 0x64
 8000fe8:	d9f5      	bls.n	8000fd6 <HAL_RCC_OscConfig+0x11e>
            return HAL_TIMEOUT;
 8000fea:	2003      	movs	r0, #3
 8000fec:	e16f      	b.n	80012ce <HAL_RCC_OscConfig+0x416>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8000fee:	4b51      	ldr	r3, [pc, #324]	; (8001134 <HAL_RCC_OscConfig+0x27c>)
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8000ff6:	d1ba      	bne.n	8000f6e <HAL_RCC_OscConfig+0xb6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ff8:	4b4e      	ldr	r3, [pc, #312]	; (8001134 <HAL_RCC_OscConfig+0x27c>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f013 0f02 	tst.w	r3, #2
 8001000:	d003      	beq.n	800100a <HAL_RCC_OscConfig+0x152>
 8001002:	68e3      	ldr	r3, [r4, #12]
 8001004:	2b01      	cmp	r3, #1
 8001006:	f040 815f 	bne.w	80012c8 <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800100a:	4a4a      	ldr	r2, [pc, #296]	; (8001134 <HAL_RCC_OscConfig+0x27c>)
 800100c:	6813      	ldr	r3, [r2, #0]
 800100e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001012:	6921      	ldr	r1, [r4, #16]
 8001014:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001018:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800101a:	6823      	ldr	r3, [r4, #0]
 800101c:	f013 0f08 	tst.w	r3, #8
 8001020:	d049      	beq.n	80010b6 <HAL_RCC_OscConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001022:	6963      	ldr	r3, [r4, #20]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d033      	beq.n	8001090 <HAL_RCC_OscConfig+0x1d8>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001028:	4b43      	ldr	r3, [pc, #268]	; (8001138 <HAL_RCC_OscConfig+0x280>)
 800102a:	2201      	movs	r2, #1
 800102c:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001030:	f7ff fc36 	bl	80008a0 <HAL_GetTick>
 8001034:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001036:	4b3f      	ldr	r3, [pc, #252]	; (8001134 <HAL_RCC_OscConfig+0x27c>)
 8001038:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800103a:	f013 0f02 	tst.w	r3, #2
 800103e:	d13a      	bne.n	80010b6 <HAL_RCC_OscConfig+0x1fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001040:	f7ff fc2e 	bl	80008a0 <HAL_GetTick>
 8001044:	1b40      	subs	r0, r0, r5
 8001046:	2802      	cmp	r0, #2
 8001048:	d9f5      	bls.n	8001036 <HAL_RCC_OscConfig+0x17e>
        {
          return HAL_TIMEOUT;
 800104a:	2003      	movs	r0, #3
 800104c:	e13f      	b.n	80012ce <HAL_RCC_OscConfig+0x416>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800104e:	4b39      	ldr	r3, [pc, #228]	; (8001134 <HAL_RCC_OscConfig+0x27c>)
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
 8001056:	d190      	bne.n	8000f7a <HAL_RCC_OscConfig+0xc2>
 8001058:	e7ce      	b.n	8000ff8 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800105a:	4a36      	ldr	r2, [pc, #216]	; (8001134 <HAL_RCC_OscConfig+0x27c>)
 800105c:	6813      	ldr	r3, [r2, #0]
 800105e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001062:	6921      	ldr	r1, [r4, #16]
 8001064:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001068:	6013      	str	r3, [r2, #0]
 800106a:	e7d6      	b.n	800101a <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_DISABLE();
 800106c:	4b32      	ldr	r3, [pc, #200]	; (8001138 <HAL_RCC_OscConfig+0x280>)
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001072:	f7ff fc15 	bl	80008a0 <HAL_GetTick>
 8001076:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001078:	4b2e      	ldr	r3, [pc, #184]	; (8001134 <HAL_RCC_OscConfig+0x27c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f013 0f02 	tst.w	r3, #2
 8001080:	d0cb      	beq.n	800101a <HAL_RCC_OscConfig+0x162>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001082:	f7ff fc0d 	bl	80008a0 <HAL_GetTick>
 8001086:	1b40      	subs	r0, r0, r5
 8001088:	2802      	cmp	r0, #2
 800108a:	d9f5      	bls.n	8001078 <HAL_RCC_OscConfig+0x1c0>
            return HAL_TIMEOUT;
 800108c:	2003      	movs	r0, #3
 800108e:	e11e      	b.n	80012ce <HAL_RCC_OscConfig+0x416>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001090:	4b29      	ldr	r3, [pc, #164]	; (8001138 <HAL_RCC_OscConfig+0x280>)
 8001092:	2200      	movs	r2, #0
 8001094:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001098:	f7ff fc02 	bl	80008a0 <HAL_GetTick>
 800109c:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800109e:	4b25      	ldr	r3, [pc, #148]	; (8001134 <HAL_RCC_OscConfig+0x27c>)
 80010a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010a2:	f013 0f02 	tst.w	r3, #2
 80010a6:	d006      	beq.n	80010b6 <HAL_RCC_OscConfig+0x1fe>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80010a8:	f7ff fbfa 	bl	80008a0 <HAL_GetTick>
 80010ac:	1b40      	subs	r0, r0, r5
 80010ae:	2802      	cmp	r0, #2
 80010b0:	d9f5      	bls.n	800109e <HAL_RCC_OscConfig+0x1e6>
        {
          return HAL_TIMEOUT;
 80010b2:	2003      	movs	r0, #3
 80010b4:	e10b      	b.n	80012ce <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010b6:	6823      	ldr	r3, [r4, #0]
 80010b8:	f013 0f04 	tst.w	r3, #4
 80010bc:	d076      	beq.n	80011ac <HAL_RCC_OscConfig+0x2f4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010be:	4b1d      	ldr	r3, [pc, #116]	; (8001134 <HAL_RCC_OscConfig+0x27c>)
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80010c6:	d133      	bne.n	8001130 <HAL_RCC_OscConfig+0x278>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80010c8:	2300      	movs	r3, #0
 80010ca:	9301      	str	r3, [sp, #4]
 80010cc:	4b19      	ldr	r3, [pc, #100]	; (8001134 <HAL_RCC_OscConfig+0x27c>)
 80010ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010d0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80010d4:	641a      	str	r2, [r3, #64]	; 0x40
 80010d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010dc:	9301      	str	r3, [sp, #4]
 80010de:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80010e0:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010e2:	4b16      	ldr	r3, [pc, #88]	; (800113c <HAL_RCC_OscConfig+0x284>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80010ea:	d029      	beq.n	8001140 <HAL_RCC_OscConfig+0x288>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010ec:	68a3      	ldr	r3, [r4, #8]
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d03a      	beq.n	8001168 <HAL_RCC_OscConfig+0x2b0>
 80010f2:	2b05      	cmp	r3, #5
 80010f4:	d03e      	beq.n	8001174 <HAL_RCC_OscConfig+0x2bc>
 80010f6:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <HAL_RCC_OscConfig+0x27c>)
 80010f8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80010fa:	f022 0201 	bic.w	r2, r2, #1
 80010fe:	671a      	str	r2, [r3, #112]	; 0x70
 8001100:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001102:	f022 0204 	bic.w	r2, r2, #4
 8001106:	671a      	str	r2, [r3, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001108:	68a3      	ldr	r3, [r4, #8]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d03c      	beq.n	8001188 <HAL_RCC_OscConfig+0x2d0>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800110e:	f7ff fbc7 	bl	80008a0 <HAL_GetTick>
 8001112:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001114:	4b07      	ldr	r3, [pc, #28]	; (8001134 <HAL_RCC_OscConfig+0x27c>)
 8001116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001118:	f013 0f02 	tst.w	r3, #2
 800111c:	d145      	bne.n	80011aa <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800111e:	f7ff fbbf 	bl	80008a0 <HAL_GetTick>
 8001122:	1b80      	subs	r0, r0, r6
 8001124:	f241 3388 	movw	r3, #5000	; 0x1388
 8001128:	4298      	cmp	r0, r3
 800112a:	d9f3      	bls.n	8001114 <HAL_RCC_OscConfig+0x25c>
        {
          return HAL_TIMEOUT;
 800112c:	2003      	movs	r0, #3
 800112e:	e0ce      	b.n	80012ce <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 8001130:	2500      	movs	r5, #0
 8001132:	e7d6      	b.n	80010e2 <HAL_RCC_OscConfig+0x22a>
 8001134:	40023800 	.word	0x40023800
 8001138:	42470000 	.word	0x42470000
 800113c:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001140:	4a6b      	ldr	r2, [pc, #428]	; (80012f0 <HAL_RCC_OscConfig+0x438>)
 8001142:	6813      	ldr	r3, [r2, #0]
 8001144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001148:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800114a:	f7ff fba9 	bl	80008a0 <HAL_GetTick>
 800114e:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001150:	4b67      	ldr	r3, [pc, #412]	; (80012f0 <HAL_RCC_OscConfig+0x438>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001158:	d1c8      	bne.n	80010ec <HAL_RCC_OscConfig+0x234>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800115a:	f7ff fba1 	bl	80008a0 <HAL_GetTick>
 800115e:	1b80      	subs	r0, r0, r6
 8001160:	2802      	cmp	r0, #2
 8001162:	d9f5      	bls.n	8001150 <HAL_RCC_OscConfig+0x298>
          return HAL_TIMEOUT;
 8001164:	2003      	movs	r0, #3
 8001166:	e0b2      	b.n	80012ce <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001168:	4a62      	ldr	r2, [pc, #392]	; (80012f4 <HAL_RCC_OscConfig+0x43c>)
 800116a:	6f13      	ldr	r3, [r2, #112]	; 0x70
 800116c:	f043 0301 	orr.w	r3, r3, #1
 8001170:	6713      	str	r3, [r2, #112]	; 0x70
 8001172:	e7c9      	b.n	8001108 <HAL_RCC_OscConfig+0x250>
 8001174:	4b5f      	ldr	r3, [pc, #380]	; (80012f4 <HAL_RCC_OscConfig+0x43c>)
 8001176:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001178:	f042 0204 	orr.w	r2, r2, #4
 800117c:	671a      	str	r2, [r3, #112]	; 0x70
 800117e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001180:	f042 0201 	orr.w	r2, r2, #1
 8001184:	671a      	str	r2, [r3, #112]	; 0x70
 8001186:	e7bf      	b.n	8001108 <HAL_RCC_OscConfig+0x250>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001188:	f7ff fb8a 	bl	80008a0 <HAL_GetTick>
 800118c:	4606      	mov	r6, r0

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800118e:	4b59      	ldr	r3, [pc, #356]	; (80012f4 <HAL_RCC_OscConfig+0x43c>)
 8001190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001192:	f013 0f02 	tst.w	r3, #2
 8001196:	d008      	beq.n	80011aa <HAL_RCC_OscConfig+0x2f2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001198:	f7ff fb82 	bl	80008a0 <HAL_GetTick>
 800119c:	1b80      	subs	r0, r0, r6
 800119e:	f241 3388 	movw	r3, #5000	; 0x1388
 80011a2:	4298      	cmp	r0, r3
 80011a4:	d9f3      	bls.n	800118e <HAL_RCC_OscConfig+0x2d6>
        {
          return HAL_TIMEOUT;
 80011a6:	2003      	movs	r0, #3
 80011a8:	e091      	b.n	80012ce <HAL_RCC_OscConfig+0x416>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80011aa:	b9ed      	cbnz	r5, 80011e8 <HAL_RCC_OscConfig+0x330>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80011ac:	69a3      	ldr	r3, [r4, #24]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	f000 808c 	beq.w	80012cc <HAL_RCC_OscConfig+0x414>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80011b4:	4a4f      	ldr	r2, [pc, #316]	; (80012f4 <HAL_RCC_OscConfig+0x43c>)
 80011b6:	6892      	ldr	r2, [r2, #8]
 80011b8:	f002 020c 	and.w	r2, r2, #12
 80011bc:	2a08      	cmp	r2, #8
 80011be:	d054      	beq.n	800126a <HAL_RCC_OscConfig+0x3b2>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80011c0:	2b02      	cmp	r3, #2
 80011c2:	d017      	beq.n	80011f4 <HAL_RCC_OscConfig+0x33c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011c4:	4b4c      	ldr	r3, [pc, #304]	; (80012f8 <HAL_RCC_OscConfig+0x440>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011ca:	f7ff fb69 	bl	80008a0 <HAL_GetTick>
 80011ce:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011d0:	4b48      	ldr	r3, [pc, #288]	; (80012f4 <HAL_RCC_OscConfig+0x43c>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80011d8:	d045      	beq.n	8001266 <HAL_RCC_OscConfig+0x3ae>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011da:	f7ff fb61 	bl	80008a0 <HAL_GetTick>
 80011de:	1b00      	subs	r0, r0, r4
 80011e0:	2802      	cmp	r0, #2
 80011e2:	d9f5      	bls.n	80011d0 <HAL_RCC_OscConfig+0x318>
          {
            return HAL_TIMEOUT;
 80011e4:	2003      	movs	r0, #3
 80011e6:	e072      	b.n	80012ce <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 80011e8:	4a42      	ldr	r2, [pc, #264]	; (80012f4 <HAL_RCC_OscConfig+0x43c>)
 80011ea:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80011ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011f0:	6413      	str	r3, [r2, #64]	; 0x40
 80011f2:	e7db      	b.n	80011ac <HAL_RCC_OscConfig+0x2f4>
        __HAL_RCC_PLL_DISABLE();
 80011f4:	4b40      	ldr	r3, [pc, #256]	; (80012f8 <HAL_RCC_OscConfig+0x440>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 80011fa:	f7ff fb51 	bl	80008a0 <HAL_GetTick>
 80011fe:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001200:	4b3c      	ldr	r3, [pc, #240]	; (80012f4 <HAL_RCC_OscConfig+0x43c>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001208:	d006      	beq.n	8001218 <HAL_RCC_OscConfig+0x360>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800120a:	f7ff fb49 	bl	80008a0 <HAL_GetTick>
 800120e:	1b40      	subs	r0, r0, r5
 8001210:	2802      	cmp	r0, #2
 8001212:	d9f5      	bls.n	8001200 <HAL_RCC_OscConfig+0x348>
            return HAL_TIMEOUT;
 8001214:	2003      	movs	r0, #3
 8001216:	e05a      	b.n	80012ce <HAL_RCC_OscConfig+0x416>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001218:	69e3      	ldr	r3, [r4, #28]
 800121a:	6a22      	ldr	r2, [r4, #32]
 800121c:	4313      	orrs	r3, r2
 800121e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001220:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001224:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001226:	0852      	lsrs	r2, r2, #1
 8001228:	3a01      	subs	r2, #1
 800122a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800122e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001230:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001234:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001236:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 800123a:	4a2e      	ldr	r2, [pc, #184]	; (80012f4 <HAL_RCC_OscConfig+0x43c>)
 800123c:	6053      	str	r3, [r2, #4]
        __HAL_RCC_PLL_ENABLE();
 800123e:	4b2e      	ldr	r3, [pc, #184]	; (80012f8 <HAL_RCC_OscConfig+0x440>)
 8001240:	2201      	movs	r2, #1
 8001242:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8001244:	f7ff fb2c 	bl	80008a0 <HAL_GetTick>
 8001248:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800124a:	4b2a      	ldr	r3, [pc, #168]	; (80012f4 <HAL_RCC_OscConfig+0x43c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001252:	d106      	bne.n	8001262 <HAL_RCC_OscConfig+0x3aa>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001254:	f7ff fb24 	bl	80008a0 <HAL_GetTick>
 8001258:	1b00      	subs	r0, r0, r4
 800125a:	2802      	cmp	r0, #2
 800125c:	d9f5      	bls.n	800124a <HAL_RCC_OscConfig+0x392>
            return HAL_TIMEOUT;
 800125e:	2003      	movs	r0, #3
 8001260:	e035      	b.n	80012ce <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8001262:	2000      	movs	r0, #0
 8001264:	e033      	b.n	80012ce <HAL_RCC_OscConfig+0x416>
 8001266:	2000      	movs	r0, #0
 8001268:	e031      	b.n	80012ce <HAL_RCC_OscConfig+0x416>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800126a:	2b01      	cmp	r3, #1
 800126c:	d031      	beq.n	80012d2 <HAL_RCC_OscConfig+0x41a>
        pll_config = RCC->PLLCFGR;
 800126e:	4b21      	ldr	r3, [pc, #132]	; (80012f4 <HAL_RCC_OscConfig+0x43c>)
 8001270:	685b      	ldr	r3, [r3, #4]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001272:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8001276:	69e2      	ldr	r2, [r4, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001278:	4291      	cmp	r1, r2
 800127a:	d12c      	bne.n	80012d6 <HAL_RCC_OscConfig+0x41e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800127c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001280:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001282:	428a      	cmp	r2, r1
 8001284:	d129      	bne.n	80012da <HAL_RCC_OscConfig+0x422>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001286:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001288:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 800128c:	401a      	ands	r2, r3
 800128e:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001292:	d124      	bne.n	80012de <HAL_RCC_OscConfig+0x426>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001294:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8001298:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800129a:	0852      	lsrs	r2, r2, #1
 800129c:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800129e:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 80012a2:	d11e      	bne.n	80012e2 <HAL_RCC_OscConfig+0x42a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012a4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80012a8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80012aa:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 80012ae:	d11a      	bne.n	80012e6 <HAL_RCC_OscConfig+0x42e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80012b0:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80012b4:	6b22      	ldr	r2, [r4, #48]	; 0x30
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012b6:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 80012ba:	d116      	bne.n	80012ea <HAL_RCC_OscConfig+0x432>
  return HAL_OK;
 80012bc:	2000      	movs	r0, #0
 80012be:	e006      	b.n	80012ce <HAL_RCC_OscConfig+0x416>
    return HAL_ERROR;
 80012c0:	2001      	movs	r0, #1
}
 80012c2:	4770      	bx	lr
        return HAL_ERROR;
 80012c4:	2001      	movs	r0, #1
 80012c6:	e002      	b.n	80012ce <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 80012c8:	2001      	movs	r0, #1
 80012ca:	e000      	b.n	80012ce <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 80012cc:	2000      	movs	r0, #0
}
 80012ce:	b002      	add	sp, #8
 80012d0:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 80012d2:	2001      	movs	r0, #1
 80012d4:	e7fb      	b.n	80012ce <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 80012d6:	2001      	movs	r0, #1
 80012d8:	e7f9      	b.n	80012ce <HAL_RCC_OscConfig+0x416>
 80012da:	2001      	movs	r0, #1
 80012dc:	e7f7      	b.n	80012ce <HAL_RCC_OscConfig+0x416>
 80012de:	2001      	movs	r0, #1
 80012e0:	e7f5      	b.n	80012ce <HAL_RCC_OscConfig+0x416>
 80012e2:	2001      	movs	r0, #1
 80012e4:	e7f3      	b.n	80012ce <HAL_RCC_OscConfig+0x416>
 80012e6:	2001      	movs	r0, #1
 80012e8:	e7f1      	b.n	80012ce <HAL_RCC_OscConfig+0x416>
 80012ea:	2001      	movs	r0, #1
 80012ec:	e7ef      	b.n	80012ce <HAL_RCC_OscConfig+0x416>
 80012ee:	bf00      	nop
 80012f0:	40007000 	.word	0x40007000
 80012f4:	40023800 	.word	0x40023800
 80012f8:	42470000 	.word	0x42470000

080012fc <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80012fc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80012fe:	f102 030c 	add.w	r3, r2, #12
 8001302:	e853 3f00 	ldrex	r3, [r3]
 8001306:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800130a:	320c      	adds	r2, #12
 800130c:	e842 3100 	strex	r1, r3, [r2]
 8001310:	2900      	cmp	r1, #0
 8001312:	d1f3      	bne.n	80012fc <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001314:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001316:	f102 0314 	add.w	r3, r2, #20
 800131a:	e853 3f00 	ldrex	r3, [r3]
 800131e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001322:	3214      	adds	r2, #20
 8001324:	e842 3100 	strex	r1, r3, [r2]
 8001328:	2900      	cmp	r1, #0
 800132a:	d1f3      	bne.n	8001314 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800132c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800132e:	2b01      	cmp	r3, #1
 8001330:	d005      	beq.n	800133e <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001332:	2320      	movs	r3, #32
 8001334:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001338:	2300      	movs	r3, #0
 800133a:	6303      	str	r3, [r0, #48]	; 0x30
}
 800133c:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800133e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001340:	f102 030c 	add.w	r3, r2, #12
 8001344:	e853 3f00 	ldrex	r3, [r3]
 8001348:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800134c:	320c      	adds	r2, #12
 800134e:	e842 3100 	strex	r1, r3, [r2]
 8001352:	2900      	cmp	r1, #0
 8001354:	d1f3      	bne.n	800133e <UART_EndRxTransfer+0x42>
 8001356:	e7ec      	b.n	8001332 <UART_EndRxTransfer+0x36>

08001358 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001358:	b510      	push	{r4, lr}
 800135a:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800135c:	6802      	ldr	r2, [r0, #0]
 800135e:	6913      	ldr	r3, [r2, #16]
 8001360:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001364:	68c1      	ldr	r1, [r0, #12]
 8001366:	430b      	orrs	r3, r1
 8001368:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800136a:	6883      	ldr	r3, [r0, #8]
 800136c:	6902      	ldr	r2, [r0, #16]
 800136e:	431a      	orrs	r2, r3
 8001370:	6943      	ldr	r3, [r0, #20]
 8001372:	431a      	orrs	r2, r3
 8001374:	69c3      	ldr	r3, [r0, #28]
 8001376:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR1,
 8001378:	6801      	ldr	r1, [r0, #0]
 800137a:	68cb      	ldr	r3, [r1, #12]
 800137c:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001380:	f023 030c 	bic.w	r3, r3, #12
 8001384:	4313      	orrs	r3, r2
 8001386:	60cb      	str	r3, [r1, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001388:	6802      	ldr	r2, [r0, #0]
 800138a:	6953      	ldr	r3, [r2, #20]
 800138c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001390:	6981      	ldr	r1, [r0, #24]
 8001392:	430b      	orrs	r3, r1
 8001394:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001396:	6803      	ldr	r3, [r0, #0]
 8001398:	4a31      	ldr	r2, [pc, #196]	; (8001460 <UART_SetConfig+0x108>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d006      	beq.n	80013ac <UART_SetConfig+0x54>
 800139e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80013a2:	4293      	cmp	r3, r2
 80013a4:	d002      	beq.n	80013ac <UART_SetConfig+0x54>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80013a6:	f7ff fc9f 	bl	8000ce8 <HAL_RCC_GetPCLK1Freq>
 80013aa:	e001      	b.n	80013b0 <UART_SetConfig+0x58>
      pclk = HAL_RCC_GetPCLK2Freq();
 80013ac:	f7ff fcac 	bl	8000d08 <HAL_RCC_GetPCLK2Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80013b0:	69e3      	ldr	r3, [r4, #28]
 80013b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013b6:	d029      	beq.n	800140c <UART_SetConfig+0xb4>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80013b8:	2100      	movs	r1, #0
 80013ba:	1803      	adds	r3, r0, r0
 80013bc:	4149      	adcs	r1, r1
 80013be:	181b      	adds	r3, r3, r0
 80013c0:	f141 0100 	adc.w	r1, r1, #0
 80013c4:	00c9      	lsls	r1, r1, #3
 80013c6:	ea41 7153 	orr.w	r1, r1, r3, lsr #29
 80013ca:	00db      	lsls	r3, r3, #3
 80013cc:	1818      	adds	r0, r3, r0
 80013ce:	6863      	ldr	r3, [r4, #4]
 80013d0:	ea4f 0283 	mov.w	r2, r3, lsl #2
 80013d4:	ea4f 7393 	mov.w	r3, r3, lsr #30
 80013d8:	f141 0100 	adc.w	r1, r1, #0
 80013dc:	f7fe ff1a 	bl	8000214 <__aeabi_uldivmod>
 80013e0:	4a20      	ldr	r2, [pc, #128]	; (8001464 <UART_SetConfig+0x10c>)
 80013e2:	fba2 3100 	umull	r3, r1, r2, r0
 80013e6:	0949      	lsrs	r1, r1, #5
 80013e8:	2364      	movs	r3, #100	; 0x64
 80013ea:	fb03 0311 	mls	r3, r3, r1, r0
 80013ee:	011b      	lsls	r3, r3, #4
 80013f0:	3332      	adds	r3, #50	; 0x32
 80013f2:	fba2 2303 	umull	r2, r3, r2, r3
 80013f6:	095b      	lsrs	r3, r3, #5
 80013f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80013fc:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001400:	f003 030f 	and.w	r3, r3, #15
 8001404:	6821      	ldr	r1, [r4, #0]
 8001406:	4413      	add	r3, r2
 8001408:	608b      	str	r3, [r1, #8]
  }
}
 800140a:	bd10      	pop	{r4, pc}
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800140c:	2300      	movs	r3, #0
 800140e:	1802      	adds	r2, r0, r0
 8001410:	eb43 0103 	adc.w	r1, r3, r3
 8001414:	1812      	adds	r2, r2, r0
 8001416:	f141 0100 	adc.w	r1, r1, #0
 800141a:	00c9      	lsls	r1, r1, #3
 800141c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001420:	00d2      	lsls	r2, r2, #3
 8001422:	1810      	adds	r0, r2, r0
 8001424:	f141 0100 	adc.w	r1, r1, #0
 8001428:	6862      	ldr	r2, [r4, #4]
 800142a:	1892      	adds	r2, r2, r2
 800142c:	415b      	adcs	r3, r3
 800142e:	f7fe fef1 	bl	8000214 <__aeabi_uldivmod>
 8001432:	4a0c      	ldr	r2, [pc, #48]	; (8001464 <UART_SetConfig+0x10c>)
 8001434:	fba2 3100 	umull	r3, r1, r2, r0
 8001438:	0949      	lsrs	r1, r1, #5
 800143a:	2364      	movs	r3, #100	; 0x64
 800143c:	fb03 0311 	mls	r3, r3, r1, r0
 8001440:	00db      	lsls	r3, r3, #3
 8001442:	3332      	adds	r3, #50	; 0x32
 8001444:	fba2 2303 	umull	r2, r3, r2, r3
 8001448:	095b      	lsrs	r3, r3, #5
 800144a:	005a      	lsls	r2, r3, #1
 800144c:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8001450:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8001454:	f003 0307 	and.w	r3, r3, #7
 8001458:	6821      	ldr	r1, [r4, #0]
 800145a:	4413      	add	r3, r2
 800145c:	608b      	str	r3, [r1, #8]
 800145e:	e7d4      	b.n	800140a <UART_SetConfig+0xb2>
 8001460:	40011000 	.word	0x40011000
 8001464:	51eb851f 	.word	0x51eb851f

08001468 <UART_WaitOnFlagUntilTimeout>:
{
 8001468:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800146c:	b083      	sub	sp, #12
 800146e:	4605      	mov	r5, r0
 8001470:	460e      	mov	r6, r1
 8001472:	4617      	mov	r7, r2
 8001474:	4699      	mov	r9, r3
 8001476:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800147a:	682b      	ldr	r3, [r5, #0]
 800147c:	681c      	ldr	r4, [r3, #0]
 800147e:	ea36 0404 	bics.w	r4, r6, r4
 8001482:	bf0c      	ite	eq
 8001484:	2401      	moveq	r4, #1
 8001486:	2400      	movne	r4, #0
 8001488:	42bc      	cmp	r4, r7
 800148a:	d128      	bne.n	80014de <UART_WaitOnFlagUntilTimeout+0x76>
    if (Timeout != HAL_MAX_DELAY)
 800148c:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
 8001490:	d0f3      	beq.n	800147a <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001492:	f7ff fa05 	bl	80008a0 <HAL_GetTick>
 8001496:	eba0 0009 	sub.w	r0, r0, r9
 800149a:	4540      	cmp	r0, r8
 800149c:	d823      	bhi.n	80014e6 <UART_WaitOnFlagUntilTimeout+0x7e>
 800149e:	f1b8 0f00 	cmp.w	r8, #0
 80014a2:	d022      	beq.n	80014ea <UART_WaitOnFlagUntilTimeout+0x82>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80014a4:	682b      	ldr	r3, [r5, #0]
 80014a6:	68da      	ldr	r2, [r3, #12]
 80014a8:	f012 0f04 	tst.w	r2, #4
 80014ac:	d0e5      	beq.n	800147a <UART_WaitOnFlagUntilTimeout+0x12>
 80014ae:	2e80      	cmp	r6, #128	; 0x80
 80014b0:	d0e3      	beq.n	800147a <UART_WaitOnFlagUntilTimeout+0x12>
 80014b2:	2e40      	cmp	r6, #64	; 0x40
 80014b4:	d0e1      	beq.n	800147a <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	f012 0f08 	tst.w	r2, #8
 80014bc:	d0dd      	beq.n	800147a <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_OREFLAG(huart);
 80014be:	2400      	movs	r4, #0
 80014c0:	9401      	str	r4, [sp, #4]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	9201      	str	r2, [sp, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	9301      	str	r3, [sp, #4]
 80014ca:	9b01      	ldr	r3, [sp, #4]
          UART_EndRxTransfer(huart);
 80014cc:	4628      	mov	r0, r5
 80014ce:	f7ff ff15 	bl	80012fc <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80014d2:	2308      	movs	r3, #8
 80014d4:	646b      	str	r3, [r5, #68]	; 0x44
          __HAL_UNLOCK(huart);
 80014d6:	f885 4040 	strb.w	r4, [r5, #64]	; 0x40
          return HAL_ERROR;
 80014da:	2001      	movs	r0, #1
 80014dc:	e000      	b.n	80014e0 <UART_WaitOnFlagUntilTimeout+0x78>
  return HAL_OK;
 80014de:	2000      	movs	r0, #0
}
 80014e0:	b003      	add	sp, #12
 80014e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_TIMEOUT;
 80014e6:	2003      	movs	r0, #3
 80014e8:	e7fa      	b.n	80014e0 <UART_WaitOnFlagUntilTimeout+0x78>
 80014ea:	2003      	movs	r0, #3
 80014ec:	e7f8      	b.n	80014e0 <UART_WaitOnFlagUntilTimeout+0x78>

080014ee <HAL_UART_Init>:
  if (huart == NULL)
 80014ee:	b360      	cbz	r0, 800154a <HAL_UART_Init+0x5c>
{
 80014f0:	b510      	push	{r4, lr}
 80014f2:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 80014f4:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80014f8:	b313      	cbz	r3, 8001540 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 80014fa:	2324      	movs	r3, #36	; 0x24
 80014fc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_UART_DISABLE(huart);
 8001500:	6822      	ldr	r2, [r4, #0]
 8001502:	68d3      	ldr	r3, [r2, #12]
 8001504:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001508:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800150a:	4620      	mov	r0, r4
 800150c:	f7ff ff24 	bl	8001358 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001510:	6822      	ldr	r2, [r4, #0]
 8001512:	6913      	ldr	r3, [r2, #16]
 8001514:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8001518:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800151a:	6822      	ldr	r2, [r4, #0]
 800151c:	6953      	ldr	r3, [r2, #20]
 800151e:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8001522:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8001524:	6822      	ldr	r2, [r4, #0]
 8001526:	68d3      	ldr	r3, [r2, #12]
 8001528:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800152c:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800152e:	2000      	movs	r0, #0
 8001530:	6460      	str	r0, [r4, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001532:	2320      	movs	r3, #32
 8001534:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001538:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800153c:	6360      	str	r0, [r4, #52]	; 0x34
}
 800153e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8001540:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_UART_MspInit(huart);
 8001544:	f7ff f8e8 	bl	8000718 <HAL_UART_MspInit>
 8001548:	e7d7      	b.n	80014fa <HAL_UART_Init+0xc>
    return HAL_ERROR;
 800154a:	2001      	movs	r0, #1
}
 800154c:	4770      	bx	lr

0800154e <HAL_UART_Transmit>:
{
 800154e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8001556:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800155a:	b2db      	uxtb	r3, r3
 800155c:	2b20      	cmp	r3, #32
 800155e:	d156      	bne.n	800160e <HAL_UART_Transmit+0xc0>
 8001560:	4604      	mov	r4, r0
 8001562:	460d      	mov	r5, r1
 8001564:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8001566:	2900      	cmp	r1, #0
 8001568:	d055      	beq.n	8001616 <HAL_UART_Transmit+0xc8>
 800156a:	b90a      	cbnz	r2, 8001570 <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 800156c:	2001      	movs	r0, #1
 800156e:	e04f      	b.n	8001610 <HAL_UART_Transmit+0xc2>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001570:	2300      	movs	r3, #0
 8001572:	6443      	str	r3, [r0, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001574:	2321      	movs	r3, #33	; 0x21
 8001576:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    tickstart = HAL_GetTick();
 800157a:	f7ff f991 	bl	80008a0 <HAL_GetTick>
 800157e:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8001580:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8001584:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001588:	68a3      	ldr	r3, [r4, #8]
 800158a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800158e:	d002      	beq.n	8001596 <HAL_UART_Transmit+0x48>
      pdata16bits = NULL;
 8001590:	f04f 0800 	mov.w	r8, #0
 8001594:	e014      	b.n	80015c0 <HAL_UART_Transmit+0x72>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001596:	6923      	ldr	r3, [r4, #16]
 8001598:	b32b      	cbz	r3, 80015e6 <HAL_UART_Transmit+0x98>
      pdata16bits = NULL;
 800159a:	f04f 0800 	mov.w	r8, #0
 800159e:	e00f      	b.n	80015c0 <HAL_UART_Transmit+0x72>
        huart->gState = HAL_UART_STATE_READY;
 80015a0:	2320      	movs	r3, #32
 80015a2:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        return HAL_TIMEOUT;
 80015a6:	2003      	movs	r0, #3
 80015a8:	e032      	b.n	8001610 <HAL_UART_Transmit+0xc2>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80015aa:	f838 3b02 	ldrh.w	r3, [r8], #2
 80015ae:	6822      	ldr	r2, [r4, #0]
 80015b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015b4:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80015b6:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 80015b8:	b292      	uxth	r2, r2
 80015ba:	3a01      	subs	r2, #1
 80015bc:	b292      	uxth	r2, r2
 80015be:	84e2      	strh	r2, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80015c0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	b193      	cbz	r3, 80015ec <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80015c6:	9600      	str	r6, [sp, #0]
 80015c8:	463b      	mov	r3, r7
 80015ca:	2200      	movs	r2, #0
 80015cc:	2180      	movs	r1, #128	; 0x80
 80015ce:	4620      	mov	r0, r4
 80015d0:	f7ff ff4a 	bl	8001468 <UART_WaitOnFlagUntilTimeout>
 80015d4:	2800      	cmp	r0, #0
 80015d6:	d1e3      	bne.n	80015a0 <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 80015d8:	2d00      	cmp	r5, #0
 80015da:	d0e6      	beq.n	80015aa <HAL_UART_Transmit+0x5c>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80015dc:	f815 2b01 	ldrb.w	r2, [r5], #1
 80015e0:	6823      	ldr	r3, [r4, #0]
 80015e2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80015e4:	e7e7      	b.n	80015b6 <HAL_UART_Transmit+0x68>
      pdata16bits = (const uint16_t *) pData;
 80015e6:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80015e8:	2500      	movs	r5, #0
 80015ea:	e7e9      	b.n	80015c0 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80015ec:	9600      	str	r6, [sp, #0]
 80015ee:	463b      	mov	r3, r7
 80015f0:	2200      	movs	r2, #0
 80015f2:	2140      	movs	r1, #64	; 0x40
 80015f4:	4620      	mov	r0, r4
 80015f6:	f7ff ff37 	bl	8001468 <UART_WaitOnFlagUntilTimeout>
 80015fa:	b918      	cbnz	r0, 8001604 <HAL_UART_Transmit+0xb6>
    huart->gState = HAL_UART_STATE_READY;
 80015fc:	2320      	movs	r3, #32
 80015fe:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    return HAL_OK;
 8001602:	e005      	b.n	8001610 <HAL_UART_Transmit+0xc2>
      huart->gState = HAL_UART_STATE_READY;
 8001604:	2320      	movs	r3, #32
 8001606:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      return HAL_TIMEOUT;
 800160a:	2003      	movs	r0, #3
 800160c:	e000      	b.n	8001610 <HAL_UART_Transmit+0xc2>
    return HAL_BUSY;
 800160e:	2002      	movs	r0, #2
}
 8001610:	b002      	add	sp, #8
 8001612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8001616:	2001      	movs	r0, #1
 8001618:	e7fa      	b.n	8001610 <HAL_UART_Transmit+0xc2>

0800161a <memset>:
 800161a:	4402      	add	r2, r0
 800161c:	4603      	mov	r3, r0
 800161e:	4293      	cmp	r3, r2
 8001620:	d100      	bne.n	8001624 <memset+0xa>
 8001622:	4770      	bx	lr
 8001624:	f803 1b01 	strb.w	r1, [r3], #1
 8001628:	e7f9      	b.n	800161e <memset+0x4>
	...

0800162c <__libc_init_array>:
 800162c:	b570      	push	{r4, r5, r6, lr}
 800162e:	4d0d      	ldr	r5, [pc, #52]	; (8001664 <__libc_init_array+0x38>)
 8001630:	4c0d      	ldr	r4, [pc, #52]	; (8001668 <__libc_init_array+0x3c>)
 8001632:	1b64      	subs	r4, r4, r5
 8001634:	10a4      	asrs	r4, r4, #2
 8001636:	2600      	movs	r6, #0
 8001638:	42a6      	cmp	r6, r4
 800163a:	d109      	bne.n	8001650 <__libc_init_array+0x24>
 800163c:	4d0b      	ldr	r5, [pc, #44]	; (800166c <__libc_init_array+0x40>)
 800163e:	4c0c      	ldr	r4, [pc, #48]	; (8001670 <__libc_init_array+0x44>)
 8001640:	f000 f818 	bl	8001674 <_init>
 8001644:	1b64      	subs	r4, r4, r5
 8001646:	10a4      	asrs	r4, r4, #2
 8001648:	2600      	movs	r6, #0
 800164a:	42a6      	cmp	r6, r4
 800164c:	d105      	bne.n	800165a <__libc_init_array+0x2e>
 800164e:	bd70      	pop	{r4, r5, r6, pc}
 8001650:	f855 3b04 	ldr.w	r3, [r5], #4
 8001654:	4798      	blx	r3
 8001656:	3601      	adds	r6, #1
 8001658:	e7ee      	b.n	8001638 <__libc_init_array+0xc>
 800165a:	f855 3b04 	ldr.w	r3, [r5], #4
 800165e:	4798      	blx	r3
 8001660:	3601      	adds	r6, #1
 8001662:	e7f2      	b.n	800164a <__libc_init_array+0x1e>
 8001664:	080016bc 	.word	0x080016bc
 8001668:	080016bc 	.word	0x080016bc
 800166c:	080016bc 	.word	0x080016bc
 8001670:	080016c0 	.word	0x080016c0

08001674 <_init>:
 8001674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001676:	bf00      	nop
 8001678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800167a:	bc08      	pop	{r3}
 800167c:	469e      	mov	lr, r3
 800167e:	4770      	bx	lr

08001680 <_fini>:
 8001680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001682:	bf00      	nop
 8001684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001686:	bc08      	pop	{r3}
 8001688:	469e      	mov	lr, r3
 800168a:	4770      	bx	lr
